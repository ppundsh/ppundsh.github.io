<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[國際海纜]]></title>
    <url>%2Fposts%2Fb545%2F</url>
    <content type="text"><![CDATA[看到相關的圖才發現自已對此沒有了解過，記錄一下。 全圖即時查詢的地圖 Submarine Cable Map 資料：來源1 我國現況我國目前有四個海纜登陸站，分別為頭城、淡水、八里、枋山，經由此四個海纜登陸站的光纖海纜電路。 海纜登陸站資料四個海纜登陸站之基本資料表如附表，顯示個登陸站之所有權人、中繼網路提供商(backhaul providers)、海纜系統名稱，備註中包括登陸站位置等資訊。頭城、枋山為中華電信獨資興建，淡水由中華電信與新世紀資通(遠傳)合建，八里由新世紀資通(NCIC) / 全球光網( Pacnet)合建。各海纜光纖線路登陸至哪一個登陸站，須事先與各登陸站的業主協商同意。例如FASTER選擇與遠傳新世紀資通合作，以淡水為登陸站。PLCN則選擇與中華電信合作，以頭城為登陸站。 名稱 Station Owner Submarine Cable Systems 備註 淡水 中華電信 新世紀資通(NCIC) APCN-2TPEEAC-C2CTSE-1FASTER 淡水海纜登陸站有兩個海纜登陸站其中一個為中華電信所有，另一個為新世紀資通 八里 新世紀資通(NCIC)/全球光網 Pacnet EAC-C2C 頭城 中華電信 APCNFNAL/RNALSMW3NCPPLCN 枋山 中華電信 China-US CNSMW3EAC-C2C 登陸臺灣之海纜系統總計有12條海纜登陸，其中1條僅約21km，1條約260km。其中登陸頭城有5條，登陸淡水有5條，登陸八里有1條，登陸枋山有3條。其中包括金門到廈門的金廈海纜(Cross Straits Cable)，全長僅約21km。另一條為淡水到福州的淡福海纜(Taiwan Strait Express-1 -TSE)，全長約260km。SeaMeWe-3同時登錄頭城、枋山，EAC-C2C同時登錄淡水、八里與枋山。 中華電信有參與投資的海纜計有 SeaMeWe-3、China-US Cable Network、APCN-2、Trans-Pacific Express (TPE)、Cross Straits Cable、Taiwan Strait Express-1 (TSE)、Asia Pacific Gateway (APG)、New Cross Pacific (NCP) Cable等8條，遠傳電信及臺灣大皆僅投資淡福海纜(Taiwan Strait Express-1 -TSE)。 Google 投資的 FASTER，已於 2016.06 營運。Pacific Light Cable Network (PLCN) 主要由 Google, Facebook投資，預計2018Q4才會營運。 我國國際海纜電路出租業務業者目前我國國際海纜電路出租業務業者核准名單，計有下列四家: 全球光網電訊股份有限公司(PACNET)、臺灣國際纜網通信股份有限公司(TIGC)、國際環球通訊網路股份有限公司(REACH)、北亞環球光纖通訊網路股份有限公司(FLAG) 另下列四家具有第1類電信事業之綜合網路業務執照，亦可經營所有固定通信網路業務，包括國際海纜電路出租業務: 中華電信股份有限公司(CHT)、臺灣固網股份有限公司(TFN)、亞太電信股份有限公司(APTG)、新世紀資通股份有限公司(NCIC) 上述公司可以將國際海纜業務，向投資興建海纜之業者，批發或自行出租給業者使用。至於從海纜登陸站到主要電信之IDC資料中心的路上光纖電纜，則是以具陸纜鋪設執照的第1類電信業者公司皆可鋪設，但由於須與海纜登陸站介接，所以仍需與海纜登陸站的業主協商同意。 全球海纜業務概況截至2017年初，全世界約有428條、超過110萬公里的海底電纜正在服務中。有些電纜相當短，如英國愛爾蘭之間的131公里CeltixConnect電纜。相比之下，其他則相當長，比如超過2萬公里的China-US Cable Network、SeaMeWe-3。傳統上，海纜係由電信營運商(telecom carriers)擁有，這些電信營運商將組成一個有興趣使用海纜的各方的聯盟(Consortium)。但在二十世紀九十年代後期，網路泡沫化後，湧入的創業公司建立了大量的私人海纜並向用戶銷售產能。聯盟和私有電纜(Private Cable)之模型今天仍然存在，但是過去幾年中最大的變化之一是涉及建造電纜的公司類型。 另舉聯盟運作為例，根據JUPITER聯盟，Amazon已經參與了JUPITER聯盟，建立了新的大容量跨太平洋海底電纜系統，跨越約14,000公里的JUPITER電纜系統，連接菲律賓、日本和美國。JUPITER聯盟包括Amazon、Facebook、NTT Communications、PCCW Global、PLDT和SoftBank。這是亞馬遜第一次在國際海底電纜聯盟中佔有一席之地。包括Google、Facebook、Microsoft、Amazon在內的OTT巨頭已經成為全球海底光纜系統的主要投資者。阿里巴巴會成為下一個參加海底電纜聯盟的嗎？ 私人網路營運商（如這些內容提供商）部署的容量，近年來已經超過了網際網路骨幹營運商。面對持續大量頻寬增長的前景，擁有新的海底電纜對這些公司來說，是有其經營戰略意義的。用TeleGeography的託管研究總監Jon Hjembo的話說：「 內容正在推動著一切，這是我們現在正在觀察的最大的趨勢之一」。 與以前的海底光纜建設熱潮不同，像Amazon、Google、Facebook和Microsoft這樣的內容提供商，在最近的這個激增中扮演著更積極的角色。這些公司單獨擁有資料中心流量的這種令人難以置信的需求，因此他們正在推動建構海底電纜的專案。 在2012年到2016年間，Google、Facebook、Microsoft和Amazon等公司部署的國際容量增長13倍，達到了179Tbps，國際內容業者國際海纜容量成長如圖3所示。（相比之下，所有其他營運商部署的國際容量僅增長了三倍，達到272Tbps） 海纜容量差別很大。通常情況下，較新的海纜能夠比15年前鋪設的電纜承載更多的資料。計畫中的MAREA海纜將能夠承載160 Tbps。通常有兩種測量電纜容量的主要方法: 潛在容量(Potential Capacity): 是電纜所有者在電纜末端安裝了所有可用設備的情況下可能的總容量。 這是媒體最常引用的指標。 點亮容量(Lit Capacity): 是實際通過電纜運行的容量。這個數字只是提供另一個容量指標。電纜擁有者很少購買和安裝傳輸設備，從一開始就充分實現電纜的潛力。由於這種設備價格昂貴，因此業主傾向於根據客戶的需求逐步升級電纜。 在亞太地區，泰國政府為發展ICT基礎設施提供強有力的支援，並製定了泰國國家寬頻政策，2021年數位孟加拉國願景，2020年柬埔寨ICT總體規劃和緬甸電子化政府ICT總體規劃等計畫。在南太平洋地區，各國政府正在為ICT發展投入更多資金。印尼政府計畫在未來五年向資訊通訊技術行業投資230億美元，用於在印尼建設海洋樞紐和南太平洋區域中心等專案。 我國海纜維運概況(一) 2006恆春大地震海纜故障案例2006年恆春地震，發生在2006.12.26UTC12時25分。震央位於北緯21.89度、東經120.56度、即臺灣中央氣象局屏東恆春地震站西偏南方22.89公里的呂宋海峽海域錄得芮氏規模6.7、深度21.9公里的地震。 震央附近發生大規模海底山崩(如圖5所示)，該地區為海底電纜路徑之密集處，導致這次地震在臺灣造成輕微的人命傷亡和建築物損毀，但嚴重的災情在於造成多條海底電纜中斷，導致東亞區內網際網路、國際電話服務受阻。聯合國國際減災策略署（ISDR）主任布里斯諾形容此次地震損害海底電纜為現代新型態災難，對經濟及社會的衝擊極為沉重，並表示將與國際電信聯盟（ITU）全面提升海底電纜的抗震標準。 這次地震發生的呂宋海峽是多條國際海底電纜的樞紐，距離枋山的海纜登陸站不遠。因此這場地震和繼後的餘震造成了海底電纜故障，影響了臺灣、日本、中國中國及韓國之間的電信服務以及這些地區連到美國、英國的電信服務。這次通訊中斷，亦導致跨國金融服務公司無法連接海外電子交易系統，銀行間外匯交易無法進行，造成難以估算的經濟損失。受影響的海底電纜(如圖6所示)包括： 中美海纜於臺灣時間12月26日20時25分距離臺灣枋山登陸站在9.7公里左右中斷； 法新歐亞三號海纜（SEA-ME-WE 3）於12月26日20時25分距離臺灣枋山登陸站於9.7公里左右中斷； 亞太海纜二號（APCN 2）S7於12月27日00時06分距離臺灣淡水登陸站904公里左右中斷； 亞太海纜二號S3於12月27日02時00分距離崇明登陸站2100公里左右（靠近臺灣處）中斷； 環球海底光纜（FLAG）亞太系統於12月26日20時43分在韓國到香港段中斷； 環球海底光纜亞歐段於12月27日04時56分在香港到上海段中斷； 亞太海纜一號（APCN 1）FNAL海纜以及多條國際海底通訊光纖電纜在臺灣以南15公里的海域發生中斷。當時僅有亞太光纜二號（APCN 2）及法新歐亞三號（SEA-ME-WE 3）北段尚可繼續通訊。至於不足的語音電話及長途電話等，則暫以中新一號衛星支援。 中華電信表示，受到地震影響，臺灣南部沿岸的海底電纜受到破壞，因此臺灣通往中國中國及東南亞部份國家的長途電話服務均受影響。經過搶修以及與各國協調後，中華電信於2006.12.27UTC時間6時修復部份語音通話系統功能；中國中國、加拿大及美洲近乎正常（詳細數值待公佈），日本則由同日3時的11%提升至30%。此外，堪用的電纜只剩亞太光纜二號及法新歐亞三號往北線路。12月28日，已經修復15%的電纜，預計要需時3星期才會完全修復完畢。與美國的IDD接通成功率已由40%提升到70%、日本由30%提升至70%、中國中國由10%提升至55%，香港30%，歐洲國家也提升至60%以上。影響最嚴重的東南亞國家，新加坡已達55%、泰國40%、印尼、馬來西亞22%，中華電信將持續調度路由改善。資料電路部分，經與國外電信業者聯繫調度，當地時間28日中午以前所有到香港、新加坡及主要的東南亞國家的資料電路都已支援完畢。 (二) 例行性海纜維護，造成連線品質影響海纜維護時，通常ISP會對其受海纜維護之影響公告讓客戶知悉，以下以HiNet為例之公告。通常此類之影響較為輕微，影響時間約幾個小時至數天，ISP會要求海纜租用公司緊急調度備用，並確保仍在一定服務品質水準下，提供連線服務。 因APG海纜維護影響HiNet客戶連線日本及中國部份網站之連線品質 起訖日期：2017–11–04~2017–11–05 時間： 15:00 ~ 23:00 範圍：詳如說明 說明：因2017.11.4至2017.11.5進行APG海纜維護，經本公司緊急調度支援後，客戶連線日本及中國部份網站於一般時段不會受到影響，僅於尖峰時段可能造成部分連線有少許延遲現象，待維護完成後，即可恢復正常，所造成之不便，敬請見諒。 因TPE海纜維護影響HiNet客戶連線歐美、中國、日本及韓國部份網站之連線品質 起訖日期：2017–10–03~2017–10–11 時間： 00:00 ~ 07:30 範圍：詳如說明 說明：因2017.10.3 至2017.10.11進行TPE海纜維護，經本公司緊急調度支援後，客戶連線歐美、中國、日本及韓國部份網站於一般時段不會受到影響，僅於尖峰時段可能造成部分連線有少許延遲現象，待維護完成後，即可恢復正常，所造成之不便，敬請見諒。 (三) 海纜障礙造成連線品質影響海纜障礙亦為經常發生事項，海纜故障之修護，是其損壞程度，嚴重者修護通常需時數個月，對ISP提供服務產生較嚴重影響。海纜租用公司之調度，因為時間較長，成本甚高，其備用回覆程度，端視與海纜租用公司之合約內容而定。 因APCN2海纜障礙影響HiNet客戶連線歐美、日本部份網站之連線品質 起訖日期：2017–04–22~2017–05–08 時間：2017.5.813:15修復 範圍：詳如說明 說明：因2017.4.22發生APCN2海纜障礙，經本公司緊急調度支援後，客戶連線歐美及日本部份網站會有少許延遲現象，待搶修完成後，即可恢復正常，所造成之不便，敬請見諒。 四、 我國海纜備援機制目前我國4個海纜登陸站，北3南1，中華興建3座(2座獨建，1座與新世紀資通合建)，新世紀資通2座(分別與中華電信、全球光網電訊合建)。中華投資興建海纜8條，遠傳電信及臺灣大皆僅投資淡福海纜(Taiwan Strait Express-1 -TSE)。我國各主要固網業者之海纜利用，中華電信係以參與投資的海纜為主，並與聯盟會員簽屬互換(SWAP)合約，如非參與投資部分之調度，須配合IRU（Indefeasible rights of use法律上不可取消的權利，通常為15年）或租用（如少於5年）方式，估算可能緊急調度之因應方式。 (一) 一般固網海纜之調度模式以中華電信為例: 現行參與投資興建部分之海纜有SeaMeWe-3、China-US Cable Network、APCN-2、Trans-Pacific Express (TPE)、Cross Straits Cable、Taiwan Strait Express-1 (TSE)、Asia Pacific Gateway (APG)、New Cross Pacific (NCP) Cable等8條。台美主要集中JUCN、TPE及Unity三條海纜，Unity及JUCN係以APG海纜銜接，將通信流量串接至美國，而TPE所佔正常頻寬比重超過51%，對美預估2017年初出現頻寬供給缺口後，可能採之中長期因應方式包括，積極參與籌建NCP，待NCP完工後，和其他海纜互換(SWAP)頻寬資源。另亦將積極參與TPE與JUCN擴建，及向其他海纜業者採購IRU，以分散路由風險，及時提供更多的路由選擇彈性。 因為臺灣大、遠傳及其他固網業者，參與興建海纜數量甚少，正常海纜訊務接採購置IRU（Indefeasible rights of use法律上不可取消的權利，通常為15年）或租用（如少於5年）方式，其緊急調度時之彈性，其備援率則依其備援容量政策而定(此大都為商業營運機密)，通常這些調度如上述以HiNet為例之公告一般例行海纜維護，或海纜故障維護之調度，大都仍屬較輕微影響，如上述所述: 「經本公司緊急調度支援後，客戶連線歐美、中國、日本及韓國部份網站於一般時段不會受到影響，僅於尖峰時段可能造成部分連線有少許延遲現象，待維護完成後，即可恢復正常」。 (二) 重大事故之海纜之調度模式因海纜通常是一段接續另一段，一段故障後，需有其他繞道設計，方能避免其影響。目前僅有SeaMeWe-3同時登錄頭城、訪山，EAC-C2C同時登錄淡水、八里與枋山。我國目前海纜出口示意圖如圖7所示。大部分海纜出口集中於頭城與淡水。以2006年恆春大地震為例，震央及海底土石流位於呂宋海峽附近，是多條國際海底電纜的樞紐，距離枋山的海纜登陸站不遠，如圖4所示，很多未登陸枋山登陸站，或途經但登陸北部登陸站的海纜亦受波及，導致一連串的相互影響效應，而不只我國受害，包括鄰近的中國、日本、韓國、香港、新加坡之海纜通訊訊務皆受到影響。 圖7 臺灣海纜出口示意圖由圖7顯示四個海纜登陸點及海纜所經路線，都將會是我國網路通信的關鍵基礎設施。不僅是我國如此，全球海底電纜目前都呈現非常脆弱現象，對大規模軍事攻擊，防禦能力脆弱。四個海纜登陸站是最容易受到攻擊的地點，也是我國對外網路通訊的致命弱點。如純依商業角度出發，目前頭城進線最為熱門，因鄰近海域較為深廣，較不易受到人為破壞。枋山因鄰近呂宋海峽，雖附近火山斷層活躍，如2006年恆春大地震，但因呂宋海峽東接太平洋，西通南海，全寬約250公里，不但是重要的航運通道，也是東亞各國通往北美洲的海底光纜密集之處。目前枋山海纜登陸站為中華電信所有，僅有3條海纜進線，且目前仍有些南北不平衡現象，雖南北本來網路訊務需求即有很大差異，但可透過環島路上光纖將南北訊務串連，對全台灣整體國內外網路備援，應該還是值得之思考的可能方案之一。 如北臺灣發生大地震或南臺灣發生大地震，致鄰近外海之海纜大規模受創(本島陸地亦遭遇大停電或斷線等事故)時，是否海纜有足夠備援調度措施? 目前觀之，可以下列事項來強化重大事故備援調度之韌性(resilience): 四個海纜登陸站目前皆為民營電信公司所有，國家遇緊急事故，NCC依電信管理法要求，應能有一快速調度或互相支援之因應措施。政府亦可考慮規劃第五、或第六海纜登陸站之可行性，包括於中部地區設立之可行性。 目前我國國土辦公室已將海纜登陸站，列為我國關鍵基礎設施通訊傳播類一級關鍵基礎設施，並定期實施防護演練。但演練僅以是否易遭受一般潛入破壞，未對大規模或嚴重破壞事件，進行預防及備援演練，建議可增加海纜更多演練案例，以強化海纜站的防護效果。 因為臺灣大、遠傳等業者，參與興建海纜數量甚少，正常海纜訊務接採購置IRU或租用（如少於5年）方式，其緊急調度時之彈性，其備援率則依其備援容量政策而定，此備援率之提高時會導致成本增加，我國固網業者往往不重視此備援率之需要性。因此未來在檢視固網業者網路設施關鍵基礎設施時，建議將固網海底電纜購置或租用之備援率，列入檢視，如必要時NCC亦可要求海纜調度備援率，應為正常海纜訊務量一定比率以上。 除中華電信外，其他固網參與投資興建海纜者甚少，建議應適時政策引導主要固網業者應增加海纜投資，以提升海纜通訊容量及提高海纜自我調度之彈性。 海纜站及進線海纜仍有南、北不平衡現象(枋山海纜登陸站為中華電信所有，僅有3條海纜進線)，雖南北本來網路訊務需求即有很大差異，如能透過環島路上光纖將南北訊務串連，並鼓勵新海纜興建時，以枋山或南部為登陸點，一方面分線環繞臺灣周圍之海纜線路，一方面可平衡海纜站進線之海纜數量，可策略上對對全台灣整體國內外網路備援能力及韌性，多提供一分保障。 運用自動辨識系統(AIS)精準定位海纜損壞位置，監控海底電纜線路安全，可避免電纜維修延誤。由於大部分海纜系統都橫跨多個國家，此AIS系統需要透過跨國多邊合作機制，才能達到預期效果。AIS網路監控中心可以24 * 7遠端監控所有的海上活動。中華電信所參與投資的電纜系統，都應適時建置此類系統，並參與多國共同自動監測計畫，以減少海纜維修延誤及無法提供訊務時間。其他固網購置IRU或租用海纜電路部分，亦可同樣要求類似自動辨識系統(AIS)即時監測之服務。 1.臺灣海纜 Taiwan Submarine Cable 概況及備援機制 ↩]]></content>
      <tags>
        <tag>MIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS NTP 設定]]></title>
    <url>%2Fposts%2F7007%2F</url>
    <content type="text"><![CDATA[剛好遇到，記錄一下1234yum install ntpchkconfig ntpd onntpdate time.stdtime.gov.twservice ntpd start 可以用以下指令檢查時間date]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Console 解鎖網頁右鍵功能]]></title>
    <url>%2Fposts%2F2e00%2F</url>
    <content type="text"><![CDATA[了解原理就不用特地裝外掛了 Console在網頁上按 F12 叫出開發者工具，點選 console 分頁，輸入以下指令 右鍵選單$(&quot;body&quot;).attr(&quot;oncontextmenu&quot;,true)或等於document.body.oncontextmenu = function() &#123; return true; &#125; 文字選取功能$(&quot;body&quot;).attr(&quot;onselectstart&quot;,true)或等於document.body.onselectstart = function() &#123; return true; &#125; 抓取文字功能 $(&quot;body&quot;).attr(&quot;ondragstart&quot;,true)或等於document.body.ondragstart = function() &#123; return true; &#125; 複製功能document.oncopy = function()&#123; return false; &#125;; 剪下功能document.oncut = function()&#123; return false; &#125;; 貼上功能document.onpaste = function()&#123; return false; &#125;; 直接編輯網頁 來源3document.designMode = &apos;on&apos; 禁止 JavaScript來源2按下F12彈出開發者工具，再按下F1彈出設置，勾選Disable JavaScript如果此時仍無法選擇文字，找到你要複製文字的地方，看看是不是添加了-webkit-user-select: none的樣式，如果有，將其去掉即可： 1.https://dotblogs.com.tw/brooke/2014/10/27/147106 ↩2.http://blog.haoji.me/disable-html-copy-and-paste.html?from=xa ↩3.https://pjchender.blogspot.com/2017/06/chrome-dev-tools.html ↩]]></content>
      <tags>
        <tag>Brower</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CISCO Router 筆記]]></title>
    <url>%2Fposts%2Ff4f2%2F</url>
    <content type="text"><![CDATA[記一下容易忘記的 Default Routeroute 0.0.0.0 0.0.0.0 192.168.1.2 RIP Default Route R1(config)#router rip R1(config-router)#version 2 R1(config-router)#no auto-summary R1(config-router)#network 192.168.12.0 R1(config-router)#network 192.168.13.0 R1(config-router)#default-information originate EIGRP Default Route 1 R1(config)#ip route 0.0.0.0 0.0.0.0 loopback 0 ## 先設定 靜態預設路由 R1(config)#router eigrp 1 R1(config-router)#redistribute static ## 將 靜態路由 redistribute to EIGRP AD/FD Administrative Distance 2 Route Source Default Distance Values 符號 Connected interface 0 Static route 1 Enhanced Interior Gateway Routing Protocol (EIGRP) summary route 5 External Border Gateway Protocol (BGP) 20 Internal EIGRP 90 D IGRP 100 OSPF 10 Intermediate System-to-Intermediate System (IS-IS) 115 Routing Information Protocol (RIP) 120 Exterior Gateway Protocol (EGP) 140 On Demand Routing (ODR) 160 External EIGRP 170 DEX Internal BGP 200 Unknown* 255 Advertised Distance / Reporting distance到目的地的 Metric K 值K1：帶寬，=1K2：可靠，=0K3：延遲，=1K4：負載，=0K5：MTU，=0 metric=[K1bandwidth+(K2bandwidth)/(256–load)+K3delay][K5/(reliability+K4)] （默認K5為0時，後半部分不參與計算，後半部分是[K5/(reliability+K4)]） 1.https://ithelp.ithome.com.tw/articles/10157168 ↩2.https://www.cisco.com/c/en/us/support/docs/ip/border-gateway-protocol-bgp/15986-admin-distance.html ↩3.https://www.pluralsight.com/blog/it-ops/eigrp-overview ↩4.https://nkongkimo.wordpress.com/2009/06/05/ccnp-bsci-module-02-eigrp/ ↩]]></content>
      <tags>
        <tag>RIP</tag>
        <tag>EIGRP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo編緝方式筆記]]></title>
    <url>%2Fposts%2F2c27%2F</url>
    <content type="text"><![CDATA[不止是 Markdown 就是了。記錄一下，供查詢用。來源3 一般常用# 標題(有分隔線)## 標題&gt;引言- 清單- 清單1. 有序清單2. 有序清單 連結[an example](http://example.com/ &quot;Title&quot;) 或 This is [an example] [id] reference-style link.[id]: http://example.com/ &quot;Optional Title Here&quot; **粗體***斜線*~刪除線~ 行內的`程式碼` 圖片 ![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 插入影片作者4 &lt;script src=&quot;/js/youtube-autoresizer.js&quot;&gt;&lt;/script&gt;&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/HfElOZSEqn4&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt; 表格 | 控制分列，- 控制分行，: 控制對齊方式。 | Item | Value | Qty || :——- | ——–: | :—: || Computer | 1600 USD | 5 || Phone | 12 USD | 12 || Pipe | 1 USD | 234 | 工作清單作者5 - [ ] Eat- [x] Code - [x] HTML - [x] CSS - [x] JavaScript- [ ] Sleep 效果 Eat Code HTML CSS JavaScript Sleep 內文跳轉來源1 # 第一章## 第一節 相對應的跳轉方式就是[第一章](#第一章)[第一節](#第一節) 置中(Next)來源2&#123;% centerquote %&#125;內文&#123;% endcenterquote %&#125; 或&#123;% cq %&#125; 內文 &#123;% endcq %&#125; Bootstrap Callout(Next)來源2&#123;% note class_name %&#125; 內文 &#123;% endnote %&#125; 效果 內文 class_name 可以是以下值 default primary success info warning danger 代碼折疊來源6效果 點擊顯/隱內容 something you want to fold, include code block. &#123;% fold 點擊顯/隱內容 %&#125;something you want to fold, include code block.&#123;% endfold %&#125; 不渲染&#123;% raw %&#125;&#123;% endraw %&#125; \的用法需在符號之前 代碼塊語法作者7 ```[language] [:title] [lang:language] [line_number:(true|false)] [first_line:number] [mark:#,#-#] [diff:true|false] [url:http...]code snippet`` ` 1.Markdown HackMD Github 同一頁文內跳轉 ↩2.Next 內置標籤 ↩3.Markdown 文件 ↩4.Hexo Markdown 簡明語法手冊 ↩5.Task list ↩6.Hexo next博客添加摺疊塊功能添加摺疊代碼塊 ↩7.HEXO下的語法高亮拓展修改 ↩]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用映像劫持替換預設系統程式]]></title>
    <url>%2Fposts%2Ff6ff%2F</url>
    <content type="text"><![CDATA[在不暴力替換下，將預設開啟程式(如 notepad)替換並記錄何為映像劫持(IFEO)。實測後 Emeditor 仍會開啟 notepad，VS Code 則能正常替換，唯 UNC 路徑下的檔案編輯時仍會把目錄傳人，這點個人無解 文件關聯作者1我們可能都遇到過需要更改系統默認文件關聯的情況。比如想用我們心愛的編輯器打開所有文本類型的文件。這就需要瞭解 Windows 的文件關聯。 簡單解釋一下，Windows 的資源管理器識別文件類型是由副檔名決定的（而並不是文件頭決定文件類型）。首先副檔名會對應一種文件類型，這種文件類型的不同操作再對應到不同的具體命令。 比如： .txt --&gt; txtfile --&gt; { &quot;open&quot;: &quot;notepad.exe %1&quot;, &quot;edit&quot;: &quot;notepad.exe %1&quot;, ... } 這些對應關係保存於註冊表的HKEY_CLASSES_ROOT項，由 Explorer 讀取後，決定文件該用什麼命令處理。 文件副檔名與文件類型的對應關係，可以通過assoc命令查看或修改。 例如：查看後綴關聯： assoc .txt .txt=txtfile 新增 / 更改關聯： assoc .json=txtfile .jpg=txtfile 刪除關聯： assoc .json= (無返回內容) 文件類型與 open command 的對應關係，可以通過ftype命令查看或修改。用法與assoc類似，使用%1表示目標文件，%2等表示其他參數，%*代表所有參數。 例如： ftype txtfile txtfile=%SystemRoot%\system32\NOTEPAD.EXE %1 進而，文件副檔名就與相應程式關聯上了。 以上的命令只改變副檔名對應的打開方式，文件類型的其他相關資訊不受影響。 使用 IFEO (Image File Execution Options)我們發現，想使用指定程式打開特定後綴的文件，只需 assoc 和 ftype 就可以搞定了。 assoc .json=txtfile ftype txtfile=MY_FAVOURITE_EDITOR.exe %1 不過這種方案只能更改 open command。比如. bat 後綴的批處理文件，右鍵點擊編輯，還是用回（很挫的）notepad 打開了。 於是很自然想到另一個方案，乾脆用我們的編輯器替換掉 notepad.exe 算了。不過這樣做的缺陷也顯而易見。何況 XP 系統還可能觸發系統文件保護機制。 因此，更好的辦法是使用 IFEO，以載入 “調試器” 的形式，在運行時 “替換” 掉系統默認程式。這樣既不會產生新文件（符號鏈結），也不會改動系統文件。 詳細操作使用 IFEO 很簡單。註冊表定位到 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe （注意其中的 Windows NT） 創建 Debugger 字串值 (REG_SZ)，更改其值為 D:\Apps\VSCode\Sublimetext.exe -z 就可以了。 這裡的 “-z” 參數表示跳過後面的參數，如果不加這個參數，Sublime Text 就會同時打開 notepad.exe 本身，因為後者是作為被調試的程式傳參傳入 Sublime Text 的。 “-z” 參數適用於 Sublime Text。如果使用 Notepad2，則 “-z” 參數要改為 “/z”. 至於 Notepad++, 暫時無解，可以嘗試用 AutoHotKey 實現該功能。 至此，使用 IFEO 替換默認編輯器就已經完成了。快去開心地擼代碼吧！ 另，也可將以下內容修改後存成 .reg 再執行亦可123Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe]&quot;Debugger&quot;=&quot;\&quot;D:\\Apps\\VSCode\\Code.exe\&quot; -z&quot; 何謂映射劫持(IFEO)文章來源 一、原理所謂的映射劫持(IFEO)就是Image File Execution Options，它位於註冊表的 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\ 鍵值下。由於這個項主要是用來調試程式用的，對一般用戶意義不大，默認是只有管理員和 local system 有權讀寫修改。比如我想運行 QQ.exe，結果運行的卻是 FlashGet.exe，這種情況下，QQ 程式被 FLASHGET 給劫持了，即你想運行的程式被另外一個程式代替了。 二、被劫持雖然映射劫持是係統自帶的功能，對一般用戶來說根本沒什麼用的必要，但是就有一些病毒通過映射劫持來做文章，表面上看起來是運行了一個正常的程式，實際上病毒已經在後台運行了。大部分的病毒和木馬都是通過載入係統啓動項來運行的，也有一些是註冊成為係統服務來啓動，他們主要通過修改註冊表來實現這個目的，主要有以下幾個鍵值： HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsCurrent\Version\Run HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsCurrent\Version\RunOnce HKEY_LOCAL_MACHINE\Software\Microsoft\WindowsCurrent\Version\RunServicesOnce 但是與一般的木馬，病毒不同的是，就有一些病毒偏偏不通過這些來載入自己，不隨著係統的啓動運行。木馬病毒的作者抓住了一些用戶的心理，等到用戶運行某個特定的程式的時候它才運行。因為一般的用戶，只要發覺自己的機子中了病毒，首先要察看的就是係統的載入項，很少有人會想到映射劫持，這也是這種病毒高明的地方。 映射劫持病毒主要通過修改註冊表中的 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\ 項來劫持正常的程式，比如有一個病毒 vires.exe 要劫持qq程式，它會在上面註冊表的位置新建一個qq.exe項，再在這個項下面新建一個字串的鍵 debugger把其值改為C:\WINDOWS \SYSTEM32\VIRES.EXE(這裡是病毒藏身的目錄)即可。 三、玩劫持1、禁止某些程式的運行123Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\qq.exe]Debugger=123.exe 把上面的代碼保存為norun_qq.reg，雙擊導入註冊表，每次雙擊運行QQ的時候，係統都會彈出一個框提示說找不到QQ，原因就QQ被重定向了。如果要讓QQ繼續運行的話，把123.exe改為其安裝目錄就可以了。 2、偷樑換柱惡作劇每次我們按下CTRL+ALT+DEL鍵時，都會彈出任務管理器，想不想在我們按下這些鍵的時候讓它彈出命令提示符視窗，下面就教你怎麼玩： 123Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\taskmgr.exe]Debugger=D:\WINDOWS\pchealth\helpctr\binaries\mconfig.exe 將上面的代碼另存為 task_cmd.reg，雙擊導入註冊表。按下那三個鍵打開了”係統配置實用程式”。 3、讓病毒迷失自我同上面的道理一樣，如果我們把病毒程式給重定向了，是不是病毒就不能運行了，答案是肯定的。 123456Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sppoolsv.exe]Debugger=123.exe[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\logo_1.exe]Debugger=123.exe 上面的代碼是以金豬病毒和威金病毒為例，這樣即使這些病毒在係統啓動項裡面，即使隨係統運行了，但是由於映像劫持的重定向作用，還是會被係統提示無法找到病毒文件(這裡是logo_1.exe和sppoolsv.exe)。 四、防劫持1、權限限制法打開註冊表編輯器，定位到 [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\ ，選中該項，右鍵→權限→高級，取消 administrator 和 system 用戶的寫權限即可。 2、快刀斬亂麻法打開註冊表編輯器，定位到 [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ ，把”Image File Execution Options”項刪除即可。 總結：以上關於映射劫持的解析與利用但願對於大家查殺木馬病毒有所幫助，也希望大家能夠挖掘更多更實用的功能。 1.利用 Windows 映像劫持实现默认程序的替换 ↩2.Launching the Debugger Automatically - MSDN ↩]]></content>
      <tags>
        <tag>MIS</tag>
        <tag>crack</tag>
        <tag>VScode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CISCO 考試備忘]]></title>
    <url>%2Fposts%2Fc7f3%2F</url>
    <content type="text"><![CDATA[主要記錄一些背誦性的網路知識 名稱 IP 種類 Port號 GLBP 無 UDP 3222 HSRP 224.0.0.2 UDP 1985 VRRP 224.0.0.18 UDP 112 GLBP 224.0.0.102 UDP 3222 EIGRP 224.0.0.10 directly 88 RADIUS 無 UDP 1812 RIPv1 224.0.0.9 RIPv2 224.0.0.5 OSPF 224.0.0.6 協定 maximum minimum 802.1Q 1522bytes 68bytes PAgP Channel Mode On Auto Desirable On O X X Auto X X O Desirable X O O LACP Channel Mode On Passive Active On O X X Passive X X O Active X O O Open System Interconnection OSI 七層 對應協議 功能 資料 應用層 Application Layer HTTP、SMTP、SNMP、FTP、Telnet、SIP、SSH、NFS、RTSP、XMPP、Whois、ENRP 檔安傳輸、Email Data 表現層 Presentation Layer TIFF、GIF、JPEG、PICT、ASCII、EBCDIC、encryption、MPEG、MIDI、HTML、XDR、ASN.1、SMB、AFP、NCP 資料格式化、代碼轉換 Data 會議層 Session Layer SQL、NFS、SCP、ASP、ASAP、SSH、ISO 8327 / CCITT X.225、RPC、NetBIOS、ASP、IGMP、Winsock、BSD sockets 解除或建立與別的接點的聯線 Data 傳輸層 Transport Layer TCP、UDP、TLS、RTP、SCRP、SPX、ATP、IL 提供端對端的接口 資料段 Segment 網路層 Network Layer IP、ICMP、RIP、OSPF、BGP、IGMP、IP SEC、OpenFlow 為封包選擇路由 封包 Packet 資料連結層 Data Link Layer 乙太網、權杖環、 HDLC、 訊框中繼、 ISDN、ATM、IEEE 802.11、FDDI、SLIP、CSLIP、PPP、ARP、RARP、MTU、PPTP、L2TP 傳輸有目地的訊框與錯誤檢測 訊框 Frame 實體層 Physical Layer 線路、無線電、光纖 以二進制資料在物理媒界上傳輸 訊框 Frame Protocol ID TCP 6 UDP 17 ICMP 1 EIGRP 88 OSPF 89 GRI 47 網路架構大概論 1－ARPANet 歷史與 MAC、IP、DNS 概念篇網路架構大概論 2－網路模型、封包架構、解析 OSI 7 層作用網路架構大概論 3－IP 概念、分級與子網路遮罩網路架構大概論 4－ 網路底層的訊框傳送法則網路架構大概論 5－802.11 與 802.11a]]></content>
      <tags>
        <tag>MIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[翻牆歷史]]></title>
    <url>%2Fposts%2Fffce%2F</url>
    <content type="text"><![CDATA[看到令人懷念的文章，感謝此文作者，後續有機會我會再編輯下去。 來源：牆與梯的較量——那些年我們一起用過的翻牆手段 在某個 Telegram 群討論到了現在很多 10 多歲的年輕人都學會翻牆了，想起我小的時候，大概也是在 10 歲左右第一次翻牆。作為經歷過多次牆與梯的升級的網蟲，把這個寫下來也算是一個對童年的回憶了…… HTTP 代理 &amp; SOCKS 代理年代： 早期的牆遮罩網站是通過 IP 位址和 DNS 污染進行定點遮罩，那時候被遮罩的網站也沒像現在這麼多。大部分被遮罩的都是法輪功的網站，一般人也用不到。那個時候可以很容易的通過 HTTP 代理進行審查規避。那個時候有一款瀏覽器不知道大家聽說過沒，叫 MyIE，有一個很方便的切換代理功能，由於作者是法輪功成員，他開發的瀏覽器的主頁也有提供很多 HTTP 代理來翻牆用（BTW：根據網路上的傳言，作者已經死於 2002.5.13。）不過根據這個軟件開發的日期以及維基百科，可能在上個世紀 90 年代就已經有牆了。不過我第一次上網是 2004 年，比這更之前的我是不知道了，歡迎有更老網齡的網蟲在評論區回憶一下？ 早期的翻牆軟件——代理獵手（Proxy Hunter）： 確切地說這個並不能被稱為翻牆軟件，這只是一個幫助你搜索可用 HTTP 代理的軟件，利用搜索出來的 HTTP 代理來完成翻牆操作。 網頁代理： 相信這個大家也用過，一個網站，把網址輸入進去就能透過代理訪問被遮罩的網站了。 現在情況： 在不知道哪次的 GFW 升級過程中，HTTP 代理和 SOCKS 代理已經完全可以被檢測（畢竟沒有加密）並阻斷，於是這種翻牆手段只能留在我們的回憶中了。。。 至於網頁代理，聰明的開發者想到了一個方法——在發送資料包之前將網頁內容 BASE64 編碼了一下，這樣 GFW 就無法探測被封鎖的關鍵字了，這個方法在 GFW 的又一次升級之後而成為了歷史… 修改 DNS 時代： 同樣是在牆的早期階段，GFW 還沒有解析 DNS 資料包的能力，而且那時候 ISP 也比較流氓。比如在你訪問一個不存在的域名的時候，（北京地區）聯通會把你劫持到 “北京寬帶網 BBN” 這個網站的一個廣告頁面，然後展示給你一些很黃很暴力的廣告。那時候就有人提議修改 DNS，不再使用 ISP 提供的 DNS。 208.67.222.222 / 208.67.220.220 8.8.8.8 / 8.8.4.4 這兩組神聖的 IP 還有人記得麼？修改用境外的 DNS 之後也起到了一定的翻牆效果。 現在情況： GFW 的某次升級之後可以解析並篡改 DNS 包了，於是此方法失效，淡出了人們的視線中… 自由門 &amp; 無界瀏覽時代： 之後不知道從什麼時候開始，各位的郵箱裡就經常收到一個名為《退 X 保平安》的郵件，裡面附帶了一個自由門軟件。於是自由門這個翻牆軟件開始流行了起來。（題外話：是不是你的第一次翻牆就是用的自由門？） 無界瀏覽和自由門一樣，都是法輪功組織開發的 當然這個軟件不僅僅只有中國用戶在使用，在其他國家如：伊朗、敘利亞、阿聯酋等有網路審查國家的用戶也有在用。 現在情況： 仍然處於活躍開發過程中，但是身邊用的人基本沒有了，這個軟件自帶內牆（遮罩法輪功組織不喜歡的網站、色情網站等）、不開源、連接不穩定而飽受詬病而漸漸的消失在了人們的記憶中… HTTPS 代理年代： HTTPS 代理，比 HTTP 代理多了個 S，代表的東西可就大不同了。那時候的 GFW 是無法識別 SSL 流量的，所以網頁代理以及 HTTP 代理都在這個 S 的光環下復活了。 現在情況： 仍然可用，比如石斑魚的翻牆軟件就是利用 squid 產生一個 HTTPS 代理進行翻牆的，網頁代理也藏在加密的 HTTPS 之後，這對 GFW 的維護工作產生了不利的影響，因為不像 HTTP 那樣可以直接獲取到內容。不過在某次的 GFW 升級之後，特徵比較明顯的 HTTPS 代理被 active probe 檢測到而遮罩，只剩下那些藏在子目錄的網頁代理以及增加了認證（不管是證書認證還是密碼認證）的 HTTPS 代理可用… 修改 hosts 文件年代： 在上面提到的修改 DNS 規避審查的方法已經無效了，又有別有用心的群眾找到了一些網站可用的 IP，並修改到 hosts 文件進行翻牆。這種方法實際是鑽了個 GFW 沒有發現這些 IP 的空子。 現在情況： 事實上這個方法輝煌了 2 次，第一次是把網站的 IP 放到 hosts 裡然後通過 HTTPS 訪問，之後 GFW 以主動收集 IP 並遮罩的方法廢掉了此方法。第二次是 CDN 的普及，很多網站用了如 CloudFlare 的 CDN，一個 IP 被封了，可以 hosts 到另一個 CloudFlare 的 IP 然後以 HTTPS 繼續訪問。隨後在 GFW 的某次升級後可以檢測到證書 SNI 並阻斷之後淡出了人們的視線… PPTP 年代： Windows 和 iOS 等系統自帶支援的 VPN 協定——PPTP。可以說是最便捷的方式了，不用下載額外的軟件，只需要一個 IP、用戶名、密碼就可以翻牆。不過這麼便捷的翻牆軟件朝廷肯定是看不下去的啦。。。 現在情況： PPTP 已經徹底被干擾，無論你怎麼設置都是連接不上的哦，PPTP 實在是死的不能再死了，而且加密強度也不高，而漸漸的被人們所遺忘… SSH 翻牆年代： 不知道從什麼時候開始，各路折騰 VPS 的折騰黨就猛然發現：SSH 可不僅僅是安全管理伺服器的工具，更可以用於翻牆。 於是 SSH 翻牆的方法在一瞬間火了起來。 ssh -qTfnN -D 7070 fq@blog.yandere.moe &lt;– 這是我學會的第一句比較長的 linux 命令 現在情況： 在某次的 GFW 升級後，可以根據流量大小識別你是在管理伺服器還是在翻牆。之後，那時候還各種百度谷歌搜索免費 SSH 賬號和國外的提供免費空間 + SSH 的平台，翻牆圈子裡互相幫助共用 SSH 賬號的場景就一去不復返了… 賽風年代： 賽風是多倫多大學公民實驗室開發的一款開源翻牆軟件，基本原理就是利用打了混淆補丁的 SSH 進行翻牆。發郵件給賽風的郵箱或者去官網下載就能獲得該軟件了。 (圖為舊版賽風) 支援很多國家的伺服器 現在情況： 仍然可用，速度一般，比較穩定，身邊很多人在用這個免費且開源的翻牆軟件。客官不妨下一份留作備用？ 西廂計畫： 這個可以說是真正的翻牆軟件而非代理軟件，因為這款軟件並沒有使用任何代理伺服器進行翻牆。相反，這個軟件的開發人員發現了牆在編寫的時候的一些漏洞，並利用這個漏洞翻牆。 現在情況： 由於西廂計畫宗旨是說明這個漏洞，而不是一款可以大規模使用的翻牆軟件，所以使用的人很少，而且需要懂一些 Linux 才可以使它工作。在某次的 GFW 核心模組升級之後失效。 GoAgent、XXNET 翻牆： GoAgent 是一個可以運行在雲平台上的代理軟件，大多數用在 Google Appspot 上，也是很老牌的。那時候 Google 還沒有被遮罩，很多人申請一堆 appspot 然後 GoAgent 負載均衡翻牆，然後小圈子裡共用高速的 IP 位址。然後有了另一個 fork 叫 XXNET，自帶掃瞄 IP 的功能以及集成了好心人提供的節點，也是基於 GoAgent 的。 現在情況： 隨著 Google 所有 IP 被 GFW 河蟹，這種方法也消失在了歷史的長河中。 Lantern、FireFly、Meek 年代： 自從很多大型服務上了 CDN 業務（Amazon、Azure 等），一群充滿研究精神的人發明了一個新的方法 “依附的自由（Collateral Freedom）”，通過將目標位址放入 CDN 服務的 Host 頭中，GFW 只能檢測到訪問了 CDN，而無法檢測到真正的目標位址。而很多網站都在使用 CDN，無法將所有的 CDN 都牆了。 目前使用本方法的：Lantern、FireFly、Tor Browser – Meek fqrouter 翻牆： fqrouter，顧名思義 翻牆路由器。是一個在 Android 平台的翻牆軟件，使用 GoAgent 進行翻牆。就連人民日報記者都在用這款軟件。 現在情況： 其作者在 Twitter 上宣佈停止開發 fqrouter 了。感謝 fqrouter 作者為翻牆事業作出的貢獻：） OpenVPN 年代： 牆再怎麼升級也擋不住嚮往自由的人們，於是開源軟件 OpenVPN 又成為翻牆的主力軍。OpenVPN 支援高強度的加密，不過就是特徵太明顯了，你看，又被遮罩了。。。 現在情況： 差不多已經沒辦法用了，因為特徵是在太明顯了，GFW 很輕鬆就會探測到 OpenVPN 伺服器然後加以封鎖。不過通過修改配置文件或加混淆補丁等方法還是可以用的。 Cisco AnyConnect 年代： 雖然 AnyConnect 和 OpenVPN 一樣，有著很明顯的特徵，但是 AnyConnect 被很多跨國大公司所使用，所以 GFW 也不敢那麼草率的遮罩掉 AnyConnect。也是一種 “依附的自由” 現在情況： 截至目前仍然可用，不過配置起來太麻煩。少數技術流會用這個翻牆… VPNGate 年代： 說到 VPNGate，不得不提到 SoftEther VPN，很早之前這個 SoftEther 提供一個日本的學術 VPN，當然在天朝就是用於翻牆了。可能是受到了 SoftEther 的啟發，VPNGate 這個軟件被日本築波大學開發了出來，準確地說 VPNGate 是 SoftEther VPN 的一個插件，用了 SoftEther VPN 的 HTTPS 流量模仿。 現在情況： 在時斷時續中仍然堅挺，可以作為備用使用。不過要記得更新為最新版本哦。 後起之秀——Shadowsocks、V2Ray、ShadowsocksR、ShadowsocksRR… Shadowsocks：相信大家都不陌生，作者 clowwindy 是全國首例因為開發翻牆軟件被喝茶的。之後專案交由另外的人維護。（向 clowwindy 致敬） V2Ray：在 Shadowsocks 作者被喝茶之後由一名在國外的華裔程式員開發，目的是翻越防火長城，是一個定製性很高的翻牆軟件，算是一個 “翻牆框架”。基於這個框架你可以開發出屬於自己的翻牆協定。目前支援 VMess 協定以及 Shadowsocks 協定、支援流量混淆、支援 KCP。就是配置起來麻煩點，但是配置好之後很好用。 ShadowsocksR(R)：是一個 Shadowsocks 的 fork，作者說 ShadowsocksR 的目的是在於加強混淆以應對 QoS。ShadowsocksRR 是在 ShadowsocksR 作者停止更新之後的另一個 fork，目前觀望中… 結尾： 如果有發現有缺少的在記憶中的翻牆軟件可以留言補充哦。 翻牆的時候不要忘記那些曾經為了自由的網路而默默付出的人們 即使再高的牆也阻止不了追求自由的人們，希望我們能看到真正的互聯網。 Across the Great Wall we can reach every corner in the world. 1.HTTPS 代理也曾很流行，直到 GFW 能是別 SNI 之後才消停。]]></content>
      <tags>
        <tag>GFW</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微軟開發的工具]]></title>
    <url>%2Fposts%2F1bae%2F</url>
    <content type="text"><![CDATA[微軟自身常常有一些很好用的工具們，開一篇獨立記錄。主要來自 Windows Sysinternals 的介紹網站, 再多補充一些自已有在用的。 Troubleshooting with the Windows Sysinternals Tools 微軟的書 SysinternalsProcess Explorer process/thread viewer管方更強大的工作管理員，可以查看程式樹、Dll 載入狀況、不明程式的 PID 、該程式開啟的檔案、開啟方式、註冊的機碼等。可以取代系統原先工作管理員Options→Configure Symbols 1srv”c:\symbols\publics*https://msdl.microsoft.com/download/symbols Process Minitorfile/registry/process/thread tracing官網即時顯示監控 registry 、文件和線程活動 Autoruns顯示所有自動運行的程式官網 SigCheck顯示檔案的版本訊息官網 PsExecexecute processes remotely or in the system account官網 Pspingexecute processes remotely or in the system account官網 TcpView顯示 TCP/IP endpoints官網 Stringsdumps printable strings in any file官網 ADInsightreal time LDAP (Active Directory) monitor官網 Zoomit官方可隨時放大、縮小螢幕 PsKill官方可以遠端關閉程式 其他Kernratesample-based system profiler官網，參考 2直接執行後就會開始記錄 CPU 使用率，跑一段時間後用 ctrl-c 就會停止執行並印出它所記錄的 CPU 使用率官網只有 x86 和 IA64 ，不能在 x64 運行 Device Console官網，作者命令列版的裝置管理員。一些基本的指令操作: 先找你要開關的 Device 的 HWID(我是存到一個文字檔慢慢找): devcon hwids * &gt; D:\hwids.txt使用底下指令去 disable , 記得在 HW ID 前面加 @ devcon /r disable “@ACPI\DELL0812\3&amp;31FF937C&amp;0”使用底下指令去 enable, 記得在 HW ID 前面加 @，然後 HWID 要用 “ “ 包起來. devcon /r enable “@ACPI\DELL0812\3&amp;31FF937C&amp;0”使用底下指令去重新 scan hardware devcon rescan使用底下指令可以做重新開機動作 devcon reboot停用網卡範例 開啟命令提示字元，輸入： DevCon find PCI*記下您要停用的網路卡的識別碼，例如底下 PCI\VEN_14E4&amp;DEV_4319&amp;SUBSYS_00051028&amp;REV_02\4&amp;2FA23535&amp;0&amp;18F0您只要記住 DEV_4319輸入： DevCon disable DEV_4319按下 Enter, 會出現底下訊息 PCI\VEN_14E4&amp;DEV_4319&amp;SUBSYS_00051028&amp;REV_02\4&amp;2FA23535&amp;0&amp;18F0: Disabled 1 device(s) disabled.啟用則輸入： DevCon enable DEV_4319按下 Enter, 會出現底下訊息 PCI\VEN_14E4&amp;DEV_4319&amp;SUBSYS_00051028&amp;REV_02\4&amp;2FA23535&amp;0&amp;18F0: Enabled 1 device(s) enabled. WinDbgDebugging Tools for Windows官網會獨立一篇 Mouse Without Borders官方可以讓多台電腦在可連通的網路環境下共用滑鼠、剪貼簿等，常用情境是自已的筆電帶到公司時。有時會失效就是了，可能和我用的網路環境有關。 1.https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/symbol-path ↩ ↩2.查詢 kernel module CPU 使用率的好幫手 – Kernrate ↩ ↩3.http://eeepage.info/windbg-analyze/ ↩ ↩4.藍屏分析】Debugging Tools for Windows 10 - 讓你從此看到藍屏不再害怕 ↩ ↩]]></content>
      <tags>
        <tag>MIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 重灌後安裝的軟體]]></title>
    <url>%2Fposts%2F8fab%2F</url>
    <content type="text"><![CDATA[記錄一下 AdobeElegants Swirls 筆刷 FontFiraCodeNotoSansCJK 其它InternetAnyDeskChromeSimpleDNSCryptVivaldi4K Video Downloadersyncthing MediamadVRLAVFilterssvp4XySubFiltermpc-beMediaPreview ProfessiondispcalGUIAnacondaBlueStacksnode.jsScreenpressoVMwareSketchupvrayWinSCP Git AboutGitGitHubDesktopSourcetree SystemCore-TempDriver boosterCDBurnerXPEaseUS Partition MasterIntel XTUThrottleStop Enhancement &amp; CleanerQTTabBarAdvanced SystemCareAttribute ChangerAudioShellAutoHotkeyDisableWinTrackingEverythingHashTabkeyboard-ledsProcess LassoteracopyVeraCryptwizmouse 更新、DotNet、DirectXMicrosoft .NET Framework 3,5Microsoft .NET Framework 4.5DirectX Compression7zipCBXshell7-Zip Theme Manager Input methodsLocale Emulator語系轉換 PIME新酷音輸入法，支援蝦米輸入 美化RainmeterMacType 更改OEM訊息以下內容存成 .reg 後執行 12345678Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\OEMInformation]"Manufacturer"="廠商""Model"="型號""SupportHours"="電話""SupportURL"="網站""logo"="D:\\Photo\\OEM.bmp" Office註冊 Emeditor 右鍵 12345Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\*\shell\EmEditor]"Icon"="%SystemRoot%\\notepad.exe,0"[HKEY_CLASSES_ROOT\*\shell\EmEditor\Command]@="D:\\Apps\\EmEditor\\EmEditor.exe %1" 註冊 VScode 右鍵12345678910111213141516171819202122Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\*\shell\Open with VS Code]@="Edit with VS Code""Icon"="D:\\Apps\\VSCode\\Code.exe,0"[HKEY_CLASSES_ROOT\*\shell\Open with VS Code\command]@="\"D:\\Apps\\VSCode\\Code.exe\" \"%1\""[HKEY_CLASSES_ROOT\Directory\shell\vscode]@="Open Folder as VS Code Project""Icon"="\"D:\\Apps\\VSCode\\Code.exe\",0"[HKEY_CLASSES_ROOT\Directory\shell\vscode\command]@="\"D:\\Apps\\VSCode\\Code.exe\" \"%1\""[HKEY_CLASSES_ROOT\Directory\Background\shell\vscode]@="Open Folder as VS Code Project""Icon"="\"D:\\Apps\\VSCode\\Code.exe\",0"[HKEY_CLASSES_ROOT\Directory\Background\shell\vscode\command]@="\"D:\\Apps\\VSCode\\Code.exe\" \"%V\"" 映像劫持1234Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe]"Debugger"="\"D:\\Program Files\\Notepad2\\Notepad2.exe\" /z"]]></content>
      <tags>
        <tag>APP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tor 指令備忘]]></title>
    <url>%2Fposts%2F44c2%2F</url>
    <content type="text"><![CDATA[以前一直以為 Tor 一定要配合引導，後來看到文章才知道 Tor 可以在指令模式下運作，真該早點看官方文件的…記錄一下常用的指令安裝服務 tor –service install 服務執行 tor –service start 指定設定檔 tor -f 開啟用批次檔(要用系統管理員權系)，另存成 .bat123456@echo offset Path=TOR.exe所在的路徑::set Path=%~dp0echo %Path%%Path%\Tor\tor.exe --service start --defaults-torrc %Path%\Data\Tor\torrc-defaults -f %Path%\Data\Tor\torrc pause 資料來源1，先簡易用 Google 翻譯，有機會再調整。 COMMAND-LINE OPTIONS -h, -help Display a short help message and exit. 幫助，可查看可用指令 -f FILE Specify a new configuration file to contain further Tor configuration options OR pass - to make Tor read its configuration from standard input. (Default: @CONFDIR@/torrc, or $HOME/.torrc if that file is not found) 指定設定檔，預設會找尋 @CONFDIR@/torrc, or $HOME/.torrc --allow-missing-torrc Do not require that configuration file specified by -f exist if default torrc can be accessed. 如果存在預設設定檔，就忽略 -f 參數 --defaults-torrc FILE Specify a file in which to find default values for Tor options. The contents of this file are overridden by those in the regular configuration file, and by those on the command line. (Default: @CONFDIR@/torrc-defaults.) 指定一個檔案，在其中查找 Tor 選項的預設值。該檔案的內容會被常規設定檔中的內容以及命令行中的內容覆蓋。 （預設：@ CONFDIR @ / torrc-defaults。） --ignore-missing-torrc Specifies that Tor should treat a missing torrc file as though it were empty. Ordinarily, Tor does this for missing default torrc files, but not for those specified on the command line. 指定 Tor 應該將丟失的 torrc 文件視為空文件。通常，Tor 會為缺少的預設 torrc 文件執行此操作，但不會在命令行中指定。 --hash-password PASSWORD Generates a hashed password for control port access. 為控制端口訪問生成散列密碼。 --list-fingerprint Generate your keys and output your nickname and fingerprint. 生成您的密鑰並輸出您的暱稱和指紋。 --verify-config Verify the configuration file is valid. 驗證設定檔是否有效。 --service install [--options command-line options] Install an instance of Tor as a Windows service, with the provided command-line options. Current instructions can be found at https://www.torproject.org/docs/faq#NTService 使用提供的命令行選項，將 Tor 的實例安裝為 Windows 服務。 --service remove|start|stop Remove, start, or stop a configured Tor Windows service. 刪除，啟動或停止配置的 Tor Windows 服務。 --nt-service Used internally to implement a Windows service. 在內部用於實現 Windows 服務。 --list-torrc-options List all valid options. 列出所有有效的選項。 --list-deprecated-options List all valid options that are scheduled to become obsolete in a future version. (This is a warning, not a promise.) 列出將來版本中計劃廢棄的所有有效選項。 （這是提前警告，不是保證。） --version Display Tor version and exit. 顯示 Tor 版本並退出。 --quiet|--hush Override the default console log. By default, Tor starts out logging messages at level &quot;notice&quot; and higher to the console. It stops doing so after it parses its configuration, if the configuration tells it to log anywhere else. You can override this behavior with the --hush option, which tells Tor to only send warnings and errors to the console, or with the --quietoption, which tells Tor not to log to the console at all. 覆蓋預設控制台日誌。預設情況下，Tor 在 “通知” 級別開始記錄消息並將其發送到控制台。它在解析其配置後會停止，如果配置告訴它在其他地方記錄。您可以使用 --hush 選項覆蓋此行為，該選項告訴 Tor 僅向控制台發送警告和錯誤，或者使用 --quiet 選項，它告訴 Tor 根本不登錄控制台。 --keygen [--newpass] Running &quot;tor --keygen&quot; creates a new ed25519 master identity key for a relay, or only a fresh temporary signing key and certificate, if you already have a master key. Optionally you can encrypt the master identity key with a passphrase: Tor will ask you for one. If you don&apos;t want to encrypt the master key, just don&apos;t enter any passphrase when asked. The --newpass option should be used with --keygen only when you need to add, change, or remove a passphrase on an existing ed25519 master identity key. You will be prompted for the old passphase (if any), and the new passphrase (if any). When generating a master key, you will probably want to use --DataDirectory to control where the keys and certificates will be stored, and --SigningKeyLifetime to control their lifetimes. Their behavior is as documented in the server options section below. (You must have write access to the specified DataDirectory.) To use the generated files, you must copy them to the DataDirectory/keys directory of your Tor daemon, and make sure that they are owned by the user actually running the Tor daemon on your system. 運行 “tor -keygen” 將為中繼創建一個新的 ed25519 主身份密鑰，或者只有新的臨時簽名密鑰和證書（如果您已有主密鑰）。或者，您可以使用密碼加密主身份識別碼：Tor 會要求您輸入密碼。如果您不想加密主密鑰，請在輸入密碼時不要輸入密碼。 只有在需要添加，更改或刪除現有 ed25519 主身份密鑰上的密碼時， - newpass 選項才應與 --keygen 一起使用。系統會提示您輸入舊的 passphase（如果有）和新的密碼（如果有的話）。 在生成主密鑰時，您可能需要使用 --DataDirectory 來控制密鑰和證書的存儲位置，以及 --SigningKeyLifetime 來控制它們的生命週期。它們的行為如下面的服務器選項部分所述。 （您必須具有對指定 DataDirectory 的寫入權限。） 要使用生成的文件，必須將它們複製到 Tor 守護程序的 DataDirectory/keys 目錄中，並確保它們由實際在系統上運行 Tor 守護程序的用戶擁有。 --passphrase-fd FILEDES Filedescriptor to read the passphrase from. Note that unlike with the tor-gencert program, the entire file contents are read and used as the passphrase, including any trailing newlines. Default: read from the terminal. Filedescriptor 從中讀取密碼。請注意，與 tor-gencert 程序不同，整個文件內容都被讀取並用作密碼，包括任何尾隨的換行符。預設：從終端讀取。 --key-expiration [purpose] The purpose specifies which type of key certificate to determine the expiration of. The only currently recognised purpose is &quot;sign&quot;. 目的是指定哪種類型的密鑰證書來確定過期。目前唯一認可的目的是 “符號”。 Running &quot;tor --key-expiration sign&quot; will attempt to find your signing key certificate and will output, both in the logs as well as to stdout, the signing key certificates expiration time in ISO-8601 format. For example, the output sent to stdout will be of the form: &quot;signing-cert-expiry: 2017-07-25 08:30:15 UTC&quot; 運行 “tor -key-expiration sign” 將嘗試查找您的簽名密鑰證書，並且將在日誌以及 stdout 中輸出 ISO-8601 格式的簽名密鑰證書過期時間。例如，發送到 stdout 的輸出將採用以下格式：“signing-cert-expiry：2017-07-25 08:30:15 UTC” Other options can be specified on the command-line in the format “–option value”, in the format”option value”, or in a configuration file. For instance, you can tell Tor to start listening for SOCKS connections on port 9999 by passing –SocksPort 9999 or SocksPort 9999 to it on the command line, or by putting “SocksPort 9999” in the configuration file. You will need to quote options with spaces in them: if you want Tor to log all debugging messages to debug.log, you will probably need to say –Log debug file debug.log.其他選項可以在命令行中以 “- 選項值” 格式，“選項值” 格式或在設定檔中指定。例如，您可以通過在命令行上傳遞 –SocksPort9999 或 SocksPort 9999，或通過在設定檔中放入 “SocksPort 9999” 來指示 Tor 開始監聽端口 9999 上的 SOCKS 連接。你需引用帶有空格的選項：如果你想 Tor 把所有的調試信息記錄到 debug.log，你可能需要說 –Log 調試文件 debug.log。 1.https://www.torproject.org/docs/tor-manual.html.en ↩]]></content>
      <tags>
        <tag>Tor</tag>
        <tag>GFW</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim 指令]]></title>
    <url>%2Fposts%2F6edb%2F</url>
    <content type="text"><![CDATA[記錄一下 顯示行數 set number 隱藏行數 set nonumber 刪除一行：dd 刪除一個單詞 / 游標之後的單詞剩餘部分：dw 刪除當前字符：x 游標之後的該行部分：d$ 文本刪除 dd 刪除一行 d$ 刪除以當前字符開始的一行字符 ndd 刪除以當前行開始的 n 行 dw 刪除以當前字符開始的一個字 ndw 刪除以當前字符開始的 n 個字 D 與 d$ 同義 d) 刪除到下一句的開始 d} 刪除到下一段的開始 d 回車 刪除 2 行 ndw 或 ndW 刪除游標處開始及其後的 n-1 個字符。d0 刪至行首。d$ 刪至行尾。ndd 刪除當前行及其後 n-1 行。x 或 X 刪除一個字符。Ctrl+u 刪除輸入方式下所輸入的文本。^R 恢復 u 的操作J 把下一行合併到當前行尾V 選擇一行^V 按下 ^V 後即可進行矩形的選擇了aw 選擇單詞iw 內部單詞 (無空格)as 選擇句子is 選擇句子 (無空格)ap 選擇段落ip 選擇段落 (無空格)D 刪除到行尾x,y 刪除與複製包含高亮區 dl 刪除當前字符（與 x 命令功能相同）d0 刪除到某一行的開始位置d^ 刪除到某一行的第一個字符位置（不包括空格或 TAB 字符）dw 刪除到某個單詞的結尾位置d3w 刪除到第三個單詞的結尾位置db 刪除到某個單詞的開始位置dW 刪除到某個以空格作為分隔符的單詞的結尾位置dB 刪除到某個以空格作為分隔符的單詞的開始位置d7B 刪除到前面 7 個以空格作為分隔符的單詞的開始位置d） 刪除到某個語句的結尾位置d4） 刪除到第四個語句的結尾位置d（ 刪除到某個語句的開始位置d） 刪除到某個段落的結尾位置d{ 刪除到某個段落的開始位置d7{ 刪除到當前段落起始位置之前的第 7 個段落位置dd 刪除當前行d/text 刪除從文本中出現 “text” 中所指定字樣的位置，一直向前直到下一個該字樣所出現的位置（但不包括該字樣）之間的內容dfc 刪除從文本中出現字符 “c” 的位置，一直向前直到下一個該字符所出現的位置（包括該字符）之間的內容dtc 刪除當前行直到下一個字符 “c” 所出現位置之間的內容D 刪除到某一行的結尾d$ 刪除到某一行的結尾5dd 刪除從當前行所開始的 5 行內容dL 刪除直到螢幕上最後一行的內容dH 刪除直到螢幕上第一行的內容dG 刪除直到工作緩存區結尾的內容d1G 刪除直到工作緩存區開始的內容 在 Vi 中移動游標 k 上h l 左 右 j 下 ^ 移動到該行第一個非空格的字符處w 向前移動一個單詞，將符號或標點當作單詞處理W 向前移動一個單詞，不把符號或標點當作單詞處理b 向後移動一個單詞，把符號或標點當作單詞處理B 向後移動一個單詞，不把符號或標點當作單詞處理( 游標移至句首) 游標移至句尾{ 游標移至段落開頭} 游標移至段落結尾H 游標移至螢幕頂行M 游標移至螢幕中間行L 游標移至螢幕最後行0 到行首$ 到行尾gg 到頁首G 到頁末行號+G 跳轉到指定行n+ 游標下移n行n- 游標上移n行Ctrl+g 查詢當前行資訊和當前文件資訊 fx 向右跳到本行字符x處（x可以是任何字符）Fx 向左跳到本行字符x處（x可以是任何字符） tx 和fx相同，區別是跳到字符x前Tx 和Fx相同，區別是跳到字符x後 C-b 向上滾動一屏C-f 向下滾動一屏C-u 向上滾動半屏C-d 向下滾動半屏C-y 向上滾動一行C-e 向下滾動一行 nz 將第n行滾至螢幕頂部，不指定n時將當前行滾至螢幕頂部。進入和退出 Vi 命令vi filename 打開或新建文件，並將游標置於第一行首vi +n filename 打開文件，並將游標置於第n行首vi + filename 打開文件，並將游標置於最後一行首vi +/pattern filename 打開文件，並將游標置於第一個與pattern匹配的串處vi -r filename 在上次正用vi編輯時發生系統崩潰，恢復filenamevi filename … filename 打開多個文件，依次進行編輯 ZZ 退出vi並保存:q! 退出vi，不保存:wq 退出vi並保存重複操作. 重複上一次操作自動補齊C-n 匹配下一個關鍵字C-p 匹配上一個關鍵字插入o 在游標下方新開一行並將游標置於新行行首，進入插入模式。O 同上，在游標上方。 a 在游標之後進入插入模式。A 同上，在游標之前。 R 進入替換模式，直到按下Escset xxx 設置XXX選項。行合併J 把下面一行合併到本行後面Vi 中查找及替換命令/pattern 從游標開始處向文件尾搜索pattern?pattern 從游標開始處向文件首搜索patternn 在同一方向重複上一次搜索命令N 在反方向上重複上一次搜索命令% 查找配對的括弧:s/p1/p2/g 將當前行中所有p1均用p2替代，若要每個替換都向用戶詢問則應該用gc選項:n1,n2s/p1/p2/g 將第n1至n2行中所有p1均用p2替代:g/p1/s//p2/g 將文件中所有p1均用p2替換 .*[]^%~$ 在Vi中具有特殊含義，若需要查找則應該加上轉義字符”\”查找的一些選項設置高亮:set hlsearch 設置高亮:set nohlsearch 關閉高亮:nohlsearch 關閉當前已經設置的高亮增量查找:set incsearch 設置增量查找:set noincsearch 關閉增量查找在 Vi 中刪除x 刪除當前游標下的字符dw 刪除游標之後的單詞剩餘部分。d$ 刪除游標之後的該行剩餘部分。dd 刪除當前行。 c 功能和d相同，區別在於完成刪除操作後進入INSERT MODEcc 也是刪除當前行，然後進入INSERT MODE 更改字符rx 將當前游標下的字符更改為x（x為任意字符）~ 更改當前游標下的字符的大小寫 鍵盤宏操作qcharacter 開始錄製宏，character為a到z的任意字符q 終止錄製宏@character 調用先前錄製的宏 恢復誤操作u 撤銷最後執行的命令U 修正之前對該行的操作Ctrl+R Redo在 Vi 中操作 Framec-w c-n 增加framec-w c-c 減少framec-w c-w 切換framec-w c-r 交換兩個frameVIM 中的塊操作Vim 支援多達 26 個剪貼板 選塊 先用v，C-v，V選擇一塊，然後用y複製，再用p粘貼。 yy 複製當前整行 nyy 複製當前行開始的n行內容 ?nyy 將游標當前行及其下n行的內容保存到寄存器?中，其中?為一個字母，n為一個數字 ?nyw 將游標當前行及其下n個詞保存到寄存器?中，其中?為一個字母，n為一個數字 ?nyl 將游標當前行及其下n個字符保存到寄存器?中，其中?為一個字母，n為一個數字 ?p 將寄存器?中的內容粘貼到游標位置之後。如果?是用yy複製的完整行， 則粘貼在游標所在行下面。這裡?可以是一個字母，也可以是一個數字 ?P 將寄存器a中的內容粘貼到游標位置之前。如果?是用yy複製的完整行， 則粘貼在游標所在行上面。這裡?可以是一個字母，也可以是一個數字 ay[motion] ay$ 複製游標位置到行末並保存在寄存器a中 ayft 複製游標位置到當前行第一個字母t並保存在寄存器a中以上指令皆可去掉 a 工作，則 y,p 對未命名寄存器工作（所有 d,c,x,y 的對象都被保存在這裡）。 剪切 / 複製 / 粘貼所有刪除的內容自動被保存，可以用 p 鍵粘貼 Vi 的選項設置all 列出所有選項設置情況term 設置終端類型ignorance 在搜索中忽略大小寫list 顯示製表位(Ctrl+I)和行尾標誌($)number 顯示行號report 顯示由面向行的命令修改過的數目terse 顯示簡短的警告資訊warn 在轉到別的文件時若沒保存當前文件則顯示NO write資訊nomagic 允許在搜索模式中，使用前面不帶“\”的特殊字符nowrapscan 禁止vi在搜索到達文件兩端時，又從另一端開始mesg 允許vi顯示其他用戶用write寫到自己終端上的資訊tips對代碼自動格式化 gg=G 在 vi/vim 中，跳到文件首尾快捷鍵: 文件開始: shift + g 文件結束: g g from:http://lxs647.iteye.com/blog/1245948 from:http://dsec.pku.edu.cn/~jinlong/vi/Vi.html from:http://www.caole.net/diary/vim.html#sec-1]]></content>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows Subsystem Linux 筆記]]></title>
    <url>%2Fposts%2F4037%2F</url>
    <content type="text"><![CDATA[先記錄安裝後要裝的 WLS 安裝部份參考1PowerShell 先以系統管理員執行： Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux ##安裝 zsh 12345$ sudo apt-get update$ sudo apt-get install zsh$ which zsh/usr/bin/zsh$ chsh -s /usr/bin/zsh 另外，也推薦一併安裝 Oh My Zsh 以及幾個方便的套件 (zsh-completions、zsh-autosuggestions、zsh-syntax-highlighting) 來達到類似 fish shell 的命令列功能。 1234$ sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"$ git clone https://github.com/zsh-users/zsh-completions ~/.oh-my-zsh/custom/plugins/zsh-completions$ git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions$ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting 使用 vim 編輯 .zshrc 以啟用 plugin。同時，也建議更換 zsh 佈景主題，因為某些主題疑似因為 Powerline 3字體所以會讓 Console Emulator 沒辦法正常顯示游標位置，至於有哪些主題是沒有問題的可以自行嘗試，這邊將以 bira 為例。 123ZSH_THEME="bira"......plugins=(… zsh-completions zsh-autosuggestions zsh-syntax-highlighting) 重新開啟 shell 後，此時我們可以透過 lsb_release -a 或是 screenfetch（安裝指令如下，可參考這篇2文章）驗明正身，確認這真的是一個 Ubuntu Linux 環境。 123sudo add-apt-repository ppa:djcj/screenfetch; \sudo apt-get update; \sudo apt-get install screenfetch WSL 環境下還可以直接執行 Windows 程式，甚至可以透過 pipe 做溝通。例如以下的指令會將 Linux Kernel 的版本資訊複製到 Windows 環境的剪貼簿（即 clip.exe）：1$ uname -a | clip.exe Cmder 設定字形選用打過 Powerline patch 的字型，Meslo LG M Regular for Powerline 字型或 Fira Code 3 都可以 [Startup] &gt; [Tasks] 頁面，新增一個 kali 的 Task。其中，-cur_console:p 參數是為了讓方向鍵能正常運作。 kali.exe -cur_console:p 設定 distro在最新版本的 Windows 10 中，由於 WSL 支援多種 distro，並且這些 distro 是可以同時執行的，所以也多提供了一個工具 wslconfig.exe 可以查詢目前可用的 distro 以及設定預設的 distro。以下示範使用 wslconfig.exe /list 指令列出目前系統上所有安裝的 Linux distro。若需要修改預設設定，可以使用 /setdefault 參數。 為了支援多種 distro，有別於過去的版本只有一個 bash.exe 存在系統中，最新版本的 WSL 又做了一些改變。首先，透過 where 指令（類似 Linux 中的 which）可以看到以下這些執行檔的存放位置。其中，因為目前 Linux distro 是以 Windows App 的型式透過市集發佈的，所以 Ubuntu 與 openSUSE 會各自有一個執行檔存放在 WindowsApps資料夾底下，也是它們各自的進入點。 而這幾個執行檔又有以下的差別： bash.exe: 進入預設 Linux distro 的 bash shell wsl.exe: 進入預設 Linux distro 的 default shell ubuntu.exe: 進入 Ubuntu 的 default shell opensuse-42.exe: 進入 openSUSE 的 default shell 在 Ubuntu 執行的同時，於新的命令列介面執行 opensuse-42.exe 便可同時運行一個 openSUSE 環境。 Powerline 安裝Python &amp; pip待 參考資料：-1.Windows Subsystem for Linux 環境配置 (最新 1709 版)- ↩2.screenfetch - 命令列 (cli) 裡的檢視系統工具 - ↩3.Fira Code | 為寫程序而生的字體 ↩]]></content>
      <tags>
        <tag>CMD</tag>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[V2Ray 記錄]]></title>
    <url>%2Fposts%2Fe457%2F</url>
    <content type="text"><![CDATA[本文記錄自V2Ray配置指南，加上一些些個人註解，非常感謝此文的作者。 常用 Linux 指令查看時間 date -R 更改時區 cp /usr/share/zoneinfo/Asia/Taipei /etc/localtime 查看 CentOS 版本 cat /etc/redhat-release 查看源 cat /etc/apt/sources.list 查看自已的 ip ifconfig.me 常用 v2ray 指令編緝設定檔 vi /etc/v2ray/config.json 控制 service v2ray start|stop|status|reload|restart|force-reload 測試設定檔 /usr/bin/v2ray/v2ray -test -config /etc/v2ray/config.json 常用 Nginx 指令vi /etc/nginx/nginx.conf nginx -t systemctl reload nginx less /var/log/nginx/access.log 參考[^12} CentOS 7 安裝 V2Ray一行結束 bash &lt;(curl -L -s https://install.direct/go.sh) 此脚本会自动安装以下文件： /usr/bin/v2ray/v2ray：V2Ray 程序； /usr/bin/v2ray/v2ctl：V2Ray 工具； /etc/v2ray/config.json：配置文件； /usr/bin/v2ray/geoip.dat：IP 数据文件 /usr/bin/v2ray/geosite.dat：域名数据文件 此脚本会配置自动运行脚本。自动运行脚本会在系统重启之后，自动运行 V2Ray。目前自动运行脚本只支持带有 Systemd 的系统，以及 Debian / Ubuntu 全系列。 运行脚本位于系统的以下位置： /etc/systemd/system/v2ray.service: Systemd /etc/init.d/v2ray: SysV 脚本运行完成后，你需要： 编辑 /etc/v2ray/config.json 文件来配置你需要的代理方式；运行 service v2ray start 来启动 V2Ray 进程；之后可以使用 service v2ray start|stop|status|reload|restart|force-reload 控制 V2Ray 的运行。 將 Clinet 端貼上預設設定即可：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&#123; "inbound": &#123; "port": 1080, // SOCKS 代理端口，在浏览器中需配置代理并指向这个端口 "listen": "127.0.0.1", "protocol": "socks", "domainOverride": ["tls","http"], // “識別相應協定的流量，並根據流量內容重置所請求的目標”，簡單說這東西就是從網路流量中識別出域名。手機用戶無法使用 chinasites 時使用。 "settings": &#123; "auth": "noauth", //socks的認證設置，noauth 代表不認證，由於 socks 通常在客戶端使用，所以這裡不認證 "udp": true &#125; &#125;, "outbound": &#123; "protocol": "vmess", "settings": &#123; "vnext": [&#123; "address": "我是SERVER IP", // 服务器地址，请修改为你自己的服务器 ip 或域名 "port": 我是端口, // 服务器端口 "users": [ &#123; "id": "我是UUID", // 用戶 ID，必須與伺服器端配置相同 "alterID": 64 // 此處的值也應當與伺服器相同，認證用值越大會使用 V2Ray 佔用更多的記憶體。對於一般用戶來說，alterId 的值設為 30 到 100 之間應該是比較合適的。 &#125; ] &#125;] &#125; &#125;, "outboundDetour": [&#123; "protocol": "freedom", "tag": "direct", //如果要使用路由，這個 tag 是一定要有的，在這裡 direct 就是 freedom 的一個標號，在路由中說 direct V2Ray 就知道是這裡的 freedom 了 "settings": &#123;&#125; &#125;], "routing": &#123; "strategy": "rules", "settings": &#123; "domainStrategy": "IPOnDemand", "rules": [&#123; "type": "field", "ip": [ "0.0.0.0/8", "10.0.0.0/8", "100.64.0.0/10", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.0.0.0/24", "192.0.2.0/24", "192.168.0.0/16", "198.18.0.0/15", "198.51.100.0/24", "203.0.113.0/24", "::1/128", "fc00::/7", "fe80::/10" ], "outboundTag": "direct" &#125;] &#125; &#125;&#125; Sever 端12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&#123; "log" : &#123; "access": "/var/log/v2ray/access.log", "error": "/var/log/v2ray/error.log", "loglevel": "warning" &#125;, "inbound": &#123; "port": 15674, "protocol": "vmess", "settings": &#123; "clients": [ &#123; "id": "12713195-43cd-4cce-8dd6-739c8244a519", "alterId": 64 &#125; ] &#125; &#125;, "outbound": &#123; "protocol": "freedom", "settings": &#123;&#125; &#125;, "outboundDetour": [ &#123; "protocol": "blackhole", "settings": &#123;&#125;, "tag": "blocked" &#125; ], "routing": &#123; "strategy": "rules", "settings": &#123; "rules": [ &#123; "type": "field", "ip": [ "0.0.0.0/8", "10.0.0.0/8", "100.64.0.0/10", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.0.0.0/24", "192.0.2.0/24", "192.168.0.0/16", "198.18.0.0/15", "198.51.100.0/24", "203.0.113.0/24", "::1/128", "fc00::/7", "fe80::/10" ], "outboundTag": "blocked" &#125; ] &#125; &#125;&#125; UUID4 生成指令 cat /proc/sys/kernel/random/uuid 多IP1234"clients": [ &#123;"id": "xxxx", "alterId": 64&#125;, &#123;"id": "yyyy", "alterId": 64&#125;] JSON作者3JSON 所有標點符號都要用半角符號（英文符號）所有字串都要加雙引號 “ “，鍵是字串，所以鍵也要加雙引號，數字不用加雙引號布爾類型也不用加雙引號，布爾值只有兩個就是 true 和 false，意思就是真和假對象沒有順序，即大括弧 {} 括起來的內容順序是怎麼樣都沒關係 中國地區不翻牆Client 端的 Route 改為12345678910111213141516"routing": &#123; "strategy": "rules", //固定格式 "settings": &#123; "domainStrategy": "IPIfNonMatch", "rules": [ &#123; "type": "chinasites", //中國的網站域名 "outboundTag": "direct" &#125;, &#123; "type": "chinaip", //中國的IP "outboundTag": "direct" &#125; ] &#125;&#125; 廣告過濾Client 端123456789101112131415161718192021222324252627282930313233343536"routing": &#123; "strategy": "rules", "settings": &#123; "domainStrategy": "IPIfNonMatch", "rules": [ &#123; "domain": [ "tanx.com", "googeadsserving.cn", "baidu.com" ], "type": "field", "outboundTag": "adblock" &#125;, &#123; "domain": [ "amazon.com", "microsoft.com", "jd.com", "youku.com", "baidu.com" ], "type": "field", "outboundTag": "direct" &#125;, &#123; "type": "chinasites", "outboundTag": "direct" &#125;, &#123; "type": "chinaip", "outboundTag": "direct" &#125; ] &#125; &#125; 在第一個規則中，域名包含有 tanx.com 或 baidu.com 的就會被阻止連接。在第二個規則當中，域名中包含有 amazon.com 或 microsoft.com 或 youku.com 或 baidu.com 的會直連。有一個問題大家發現沒有，兩個規則都有 baidu.com ，那麼會執行哪個呢？答案是只會執行第一個，原因是： 規則是放在 routing.settings.rules 這個陣列當中，陣列的內容是有順序的，也就是說在這裡規則是有順序的，匹配規則時是從上往下匹配 當路由匹配到一個規則時就會跳出匹配而不會對之後的規則進行匹配 inbound / outbound 和 inboundDetour / outboundDetour 的區別inbound 和 inboundDetour 的格式形如：123456789101112131415161718192021222324252627282930313233343536373839"inbound": &#123; "port": 1080, "listen": "127.0.0.1", "protocol": "協定名稱", "settings": &#123;&#125;, "streamSettings": &#123;&#125;, "allowPassive": false, "tag": "標識"&#125;,"inboundDetour": [ &#123; "port": 2080, "listen": "127.0.0.1", "protocol": "協定名稱", "settings": &#123;&#125;, "streamSettings": &#123;&#125;, "allowPassive": false, "tag": "標識", "allocate": &#123; "strategy": "always", "refresh": 5, "concurrency": 3 &#125; &#125;, &#123; "port": 3080, "listen": "127.0.0.1", "protocol": "協定名稱", "settings": &#123;&#125;, "streamSettings": &#123;&#125;, "allowPassive": false, "tag": "標識", "allocate": &#123; "strategy": "always", "refresh": 5, "concurrency": 3 &#125; &#125;] 可以很明顯地看出來，inbound 和 inboundDetour 基本是一樣的，只不過 inboundDetour 是 inbound 的集合。還有一點不同的是 inboundDetour 多了一個 allocate 參數，這是只有在動態端口才會用到的參數，如果不配置動態端口 inboundDetour 和 inbound 無異。 即有兩點不同： 配置中 inbound 只能並且必須設置一個傳入的配置，而 inboundDetour 可以設置任意多個傳入配置inboundDetour 的傳入配置多了一個給動態端口用的 allocate 參數接著是傳出，outbound 和 outboundDetour 格式形如:1234567891011121314151617181920212223242526272829303132"outbound": &#123; "sendThrough": "0.0.0.0", "protocol": "協定名稱", "settings": &#123;&#125;, "tag": "標識", "streamSettings": &#123;&#125;, "proxySettings": &#123; "tag": "another-outbound-tag" &#125; &#125;,"outboundDetour": [ &#123; "sendThrough": "0.0.0.0", "protocol": "協定名稱", "settings": &#123;&#125;, "tag": "標識", "streamSettings": &#123;&#125;, "proxySettings": &#123; "tag": "another-outbound-tag" &#125; &#125;, &#123; "sendThrough": "0.0.0.0", "protocol": "協定名稱", "settings": &#123;&#125;, "tag": "標識", "streamSettings": &#123;&#125;, "proxySettings": &#123; "tag": "another-outbound-tag" &#125; &#125;] 單純從配置格式來看，outbound 和 outboundDetour 沒有任何區別。但是實際上 outbound 和 outboundDetour 也有兩點不同： 配置中 outbound 只能並且必須設置一個傳出的配置，而 outboundDetour 可以設置任意多個傳出配置（實際上不可能任意多）當沒有配置路由規則或者路由沒有匹配的情況下，默認由 outbound 將資料包發出去。在上面給出的傳入和傳出配置格式當中，有一些參數不曾提到過，主要是因為一般情況下使用 V2Ray 默認設置即可 V2Ray 高級設置V2Ray 的相比其他工具有一大優點是可以自行選擇傳輸層6的形式，也就是說 V2Ray 伺服器和客戶端之間的傳輸的流量格式我們是可以選擇的。如我們可以選擇偽裝成 HTTP(TCP) 流量，如果使用了 mKCP 也可以偽裝成 BT 下載、視頻通話、微信視頻通話。也可以選擇使用 WebSokcs 或者 TLS。以上這個都是傳輸層的配置決定的。 V2Ray 中傳輸層配置在 transport 裡設定，也可以在各個 inbound/outbound 中的 streamSettings 設定。這兩者的區別是 inbound/outbound 的 streamSettings 只對當前的 inbound/outbound 有效 (分連接配置)，不影響其他的 inbound/outbound 的傳輸層配置，而 transport 是全局的，對整個配置所有的 inbound 和 outbound 都有效 (全局配置)，如果一個 inbound/outbound 中設定了 streamSettings，transport 的設定不會影響這個 inbound/outbound。 在本篇當中，大部分內容都涉及到了傳輸層，關於這部分內容使用的是 inbound/outbound 的 streamSettings(分連接配置)，同時也建議大家使用分連接配置。因為如果你在全局配置中開啟了偽裝功能，會導致瀏覽器或者其他軟件無法與 V2Ray 通信！這不是 bug，只是因為你設置不當。 Mux 多路復用 (multiplexing)將多個 TCP 連線合併為一條，可節省資源，提高並發能力。 Mux 只需在客戶端開啟，伺服器會自動識別，所以只給客戶端的配置。只要在 outbound 或 outboundDetour 加入 “mux”: {“enabled”: true} 即可：12345678910111213141516171819202122232425262728&#123; "inbound": &#123; "port": 1080, // 監聽端口 "protocol": "socks", // 入口協定為 SOCKS 5 "domainOverride": ["tls","http"], "settings": &#123; "auth": "noauth" // 不認證 &#125; &#125;, "outbound": &#123; "protocol": "vmess", // 出口協定 "settings": &#123; "vnext": [ &#123; "address": "serveraddr.com", // 伺服器位址，請修改為你自己的伺服器 ip 或域名 "port": 16823, // 伺服器端口 "users": [ &#123; "id": "b831381d-6324-4d53-ad4f-8cda48b30811", // 用戶 ID，必須與伺服器端配置相同 "alterId": 64 // 此處的值也應當與伺服器相同 &#125; ] &#125; ] &#125;, "mux": &#123;"enabled": true&#125; &#125;&#125; mKCPV2Ray 引入了 KCP 傳輸協定，稱為 mKCP，相對於常規的 TCP 來說，mKCP 在某些網路環境下具有更大的優勢，但是 mKCP 有一個很明顯的缺點就是會比 TCP 耗費更多的流量，所以請酌情使用。要瞭解的一點是，mKCP 與 KCPTUN 同樣是 KCP 協定，但兩者並不相容。KCP 後文會再作介紹 1.1. 配置mKCP 的配置比較簡單，只需在伺服器的 inbound 和 客戶端的 outbound 添加一個 streamSettings 並設置成 mkcp 即可。 1.1.1. 伺服器配置123456789101112131415161718192021222324252627282930313233&#123; "inbound": &#123; "port": 16823, "protocol": "vmess", "settings": &#123; "clients": [ &#123; "id": "b831381d-6324-4d53-ad4f-8cda48b30811", "alterId": 64 &#125; ] &#125;, "streamSettings": &#123; "network": "mkcp", //此處的 mkcp 也可寫成 kcp，兩種寫法是起同樣的效果 "kcpSettings": &#123; //包含一些關於 mKCP 設置的參數 "mtu": 1350, "tti": 20, "uplinkCapacity": 5, //上行鏈路容量，將決定 V2Ray 向外發送資料包的速率。單位為 MB "downlinkCapacity": 100, //下行鏈路容量，將決定 V2Ray 接收資料包的速率。單位同樣是 MB "congestion": false, "readBufferSize": 1, "writeBufferSize": 1, "header": &#123; //對於資料包的偽裝 "type": "none" //要偽裝成的資料包類型， 可以設置成 utp、srtp、wechat-video 或者 none，這四個可以分別將 mKCP 資料偽裝成 BT 下載、視頻通話、微信視頻通話以及不進行偽裝。這裡的 type 參數，客戶端與伺服器要一致 &#125; &#125; &#125; &#125;, "outbound": &#123; "protocol": "freedom", "settings": &#123;&#125; &#125;&#125; 1.1.2. 客戶端配置123456789101112131415161718192021222324252627282930313233343536373839404142&#123; "inbound": &#123; "port": 1080, "protocol": "socks", "domainOverride": ["tls","http"], "settings": &#123; "auth": "noauth" &#125; &#125;, "outbound": &#123; "protocol": "vmess", "settings": &#123; "vnext": [ &#123; "address": "serveraddr.com", "port": 16823, "users": [ &#123; "id": "b831381d-6324-4d53-ad4f-8cda48b30811", "alterId": 64 &#125; ] &#125; ] &#125;, "streamSettings": &#123; "network": "mkcp", "kcpSettings": &#123; "mtu": 1350, "tti": 20, "uplinkCapacity": 5, "downlinkCapacity": 100, "congestion": false, "readBufferSize": 1, "writeBufferSize": 1, "header": &#123; "type": "none" &#125; &#125; &#125; &#125;&#125; 1.1.3. 說明在上面的配置當中，與之前相比主要的變化在於多了一個 streamSettings 客戶端的上行對於伺服器來說是下行，同樣地客戶端的下行是伺服器的上行，mKCP 設置當中伺服器和客戶端都有 uplinkCapacity 和 downlinkCapacity，所以客戶端的上傳速率由伺服器的 downlinkCapacity 和客戶端的 uplinkCapacity 中的最小值決定，客戶端的下載速率也是同樣的道理。因此，建議將伺服器和客戶端的 downlinkCapacity 設成一個很大的值，然後分別修改兩端的 uplinkCapacity 以調整上下行速率。 還有一個 header 參數可以對 mKCP 進行偽裝，這是 mKCP 的一個優勢。具體的偽裝在 type 參數設置，type 可以設置成 utp、srtp、wechat-video 或者 none，這四個可以分別將 mKCP 資料偽裝成 BT 下載、視頻通話、微信視頻通話以及不進行偽裝。這裡的 type 參數，客戶端與伺服器要一致 至於上述配置裡有但是我沒有說明的參數，是 V2Ray 的默認值，我個人建議是保持默認。如果你需要瞭解或者修改，請參考手冊。 動態端口V2Ray 提供了一個叫動態端口的功能。顧名思義，就是可以動態變化端口，對於對抗封鎖或許有效 伺服器 inbound 的端口作為主端口，在 inboundDetour 開動態監聽的端口，客戶端不用額外設定。 1.1.1. 伺服器配置123456789101112131415161718192021222324252627282930313233343536&#123; "inbound":&#123; "port": 37192, "protocol": "vmess", "settings": &#123; "clients": [ &#123; "id": "d17a1af7-efa5-42ca-b7e9-6a35282d737f", "level": 1, "alterId": 64 &#125; ], "detour": &#123; "to": "dynamicPort" &#125; &#125; &#125;, "inboundDetour":[ &#123; "protocol": "vmess", "port": "10000-20000", // 端口範圍 "tag": "dynamicPort", "settings": &#123; "default": &#123; "level": 1, "alterId": 32 &#125; &#125;, "allocate": &#123; // 分配模式 "strategy": "random", // 隨機開啟 "concurrency": 2, // 同時開放兩個端口 "refresh": 3 // 每三分鐘刷新一次 &#125; &#125; ]&#125; 動態端口使用 mKCP同 mKCP 章節，在 inbound 和 inboundDetour 加入 streamSettings 並將 network 設置為 kcp 即可。伺服器配置 123456789101112131415161718192021222324252627282930313233343536373839404142&#123; "inbound": &#123; "port": 37192, "protocol": "vmess", "settings": &#123; "clients": [ &#123; "id": "d17a1af7-efa5-42ca-b7e9-6a35282d737f", "level": 1, "alterId": 64 &#125; ], "detour": &#123; "to": "dynamicPort" &#125; &#125;, "streamSettings": &#123; "network": "kcp" &#125; &#125;, "inboundDetour": [ &#123; "protocol": "vmess", "port": "10000-20000", // 端口範圍 "tag": "dynamicPort", "settings": &#123; "default": &#123; "level": 1, "alterId": 32 &#125; &#125;, "allocate": &#123; // 分配模式 "strategy": "random", // 隨機開啟 "concurrency": 2, // 同時開放兩個端口 "refresh": 3 // 每三分鐘刷新一次 &#125;, "streamSettings": &#123; "network": "kcp" &#125; &#125; ]&#125; 傳出代理V2Ray 提供了傳出代理功能，利用它可以實現中轉（在沒有中轉伺服器操作權限的情況下）。 1.1. 基本傳出代理使用傳出代理可以實現由一個 Shadowsocks 伺服器或者 V2Ray(VMess) 伺服器來中轉你的網路流量，中轉伺服器只能看到你加密的資料而不知道原始的資料是什麼。 以下面的配置說明，它的工作原理是： 你在 Twitter 發了個帖子 f**k GFW，由 V2Ray 代理 V2Ray 客戶端收到瀏覽器發出的 f**k GFW 的帖子後，首先由對其進行加密 (VMess，id: b12614c5-5ca4-4eba-a215-c61d642116ce, 目的伺服器: 1.1.1.1:8888) 加密後資料包將被轉到 transit 這個 outbound 中，在這裡資料包又會加密一次 (Shadowsocks, password: password, 伺服器: 2.2.2.2:1024) 兩次加密後的資料包被發送到了 Shadowsocks 伺服器，該伺服器收到後解包後得到仍是加密的資料包（步驟 2 中加密後的資料包），然後將資料包發到 VMess 伺服器。即便這個 Shadowsocks 伺服器的主人是個偷窺狂魔，他也沒辦法看到你的原始資料。 VMess 伺服器收到 Shadowsocks 伺服器發來的資料包，解密得到原始的資料包，然後把你這個帖子發到 Twitter 的網站中。 只要第 5 步中的伺服器是自己掌控的就不用擔心別人看到你的上網的內容。 過程說明：1.我是使用者-&gt;2.我是使用者安裝在系統上的 V2Ray 客戶端，加密成 V2Ray 格式→3.V2Ray 客戶端出口再加密成 SS 格式→4.中轉的 SS server 收到後只能解密一次，就再轉送給下一站→5.V2Ray Server 收到，解密後傳出。 客戶端： 123456789101112131415161718192021222324252627282930313233343536373839404142&#123; "outbound": &#123; "protocol": "vmess", "settings": &#123; // settings 的根據實際情況修改 "vnext": [ &#123; "address": "1.1.1.1", "port": 8888, "users": [ &#123; "alterId": 64, "id": "b12614c5-5ca4-4eba-a215-c61d642116ce" &#125; ] &#125; ] &#125;, "streamSettings": &#123; "network": "tcp" // 此處不能是 "kcp"，設成 "kcp" 將無法聯網 &#125;, "proxySettings": &#123; "tag": "transit" // 這裡的 tag 必須跟作為代理 VPS 的 tag 一致，這裡設定的是 "transit" &#125; &#125;, "outboundDetour": [ &#123; "protocol": "shadowsocks", "settings": &#123; "servers": [ &#123; "address": "2.2.2.2", "method": "aes-256-cfb", "ota": false, "password": "password", "port": 1024 &#125; ] &#125;, "tag": "transit" &#125; ]&#125; 1.2. 鏈式傳出代理如果你有多個 Shadowsocks 或 VMess 賬戶，那麼你可以這樣: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&#123; "outbound": &#123; "protocol": "vmess", "settings": &#123; // settings 的根據實際情況修改 "vnext": [ &#123; "address": "1.1.1.1", "port": 8888, "users": [ &#123; "alterId": 64, "id": "b12614c5-5ca4-4eba-a215-c61d642116ce" &#125; ] &#125; ] &#125;, "streamSettings": &#123; "network": "tcp" &#125;, "tag": "DOUS", "proxySettings": &#123; "tag": "DOSG" &#125; &#125;, "outboundDetour": [ &#123; "protocol": "shadowsocks", "settings": &#123; "servers": [ &#123; "address": "2.2.2.2", "method": "aes-256-cfb", "ota": false, "password": "password", "port": 1024 &#125; ] &#125;, "tag": "AliHK" &#125;, &#123; "protocol": "shadowsocks", "settings": &#123; "servers": [ &#123; "address": "3.3.3.3", "method": "aes-256-cfb", "ota": false, "password": "password", "port": 3442 &#125; ] &#125;, "tag": "AliSG", "proxySettings": &#123; "tag": "AliHK" &#125; &#125;, &#123; "protocol": "vmess", "settings": &#123; "vnext": [ &#123; "address": "4.4.4.4", "port": 8462, "users": [ &#123; "alterId": 64, "id": "b27c24ab-2b5a-433e-902c-33f1168a7902" &#125; ] &#125; ] &#125;, "tag": "DOSG", "streamSettings": &#123; "network": "tcp" &#125;, "proxySettings": &#123; "tag": "AliSG" &#125; &#125;, ]&#125; 那麼資料包經過的節點依次為： PC -&gt; AliHK -&gt; AliSG -&gt; DOSG -&gt; DOUS -&gt; 目標網站 這樣的傳出代理形成了一條鏈條，我稱之為鏈式傳出代理。 注意：如果你打算配置 (動態) 鏈式傳出代理，應當明確幾點： 性能。鏈式代理使用了多個節點，可能會造成延時、帶寬等網路性能問題，並且客戶端對每一個加解密的次數取決於代理鏈的長度，理論上也會有一定的影響。 安全。前文提到，傳出代理會一定程度上提高安全性，但安全取決於最弱一環，並不意味著代理鏈越長就會越安全。如果你需要匿名，請考慮成熟的匿名方案。 另外，使用了傳出代理 streamSettings 會失效。 HTTP 偽裝（2018-03-16 註：個人建議不要使用 HTTP 偽裝） V2Ray 自 v2.5 版本開始提供 HTTP 偽裝功能，後經作者不斷完善，到現在已經非常成熟穩定了。V2Ray 的 HTTP 偽裝功能可以可以將 V2Ray 的流量偽裝成正常的 HTTP 協定的。這裡給出一個 HTTP 偽裝的伺服器端與客戶端配置文件示例。 配置中關於 HTTP 頭欄位的內容及含義，Wikipedia 有簡要的說明，可參閱。 1.1. 配置 從 V2Ray 的實現角度來說，使用 HTTP 偽裝的同時完全可以使用動態端口。但我個人並不建議這麼做，因為從實際情況來看，基本上不會有人在一個伺服器上開使用多個端口的 Web 服務。如果你覺得 HTTP 偽裝的配置過於複雜不懂得如何修改，那請直接使用下面的配置即可。 1.1.1. 伺服器123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&#123; "log" : &#123; "access": "/var/log/v2ray/access.log", "error": "/var/log/v2ray/error.log", "loglevel": "warning" &#125;, "inbound": &#123; "port": 80, //推薦80端口，更好地迷惑防火牆（好吧實際上並沒有什麼卵用 "protocol": "vmess", "settings": &#123; "clients": [ &#123; "id": "b831381d-6324-4d53-ad4f-8cda48b30811", "level": 1, "alterId": 64 &#125; ] &#125;, "streamSettings": &#123; "network": "tcp", "tcpSettings": &#123; "header": &#123; // header 這一項是關於資料包偽裝的設置，可自定義合理的內容，但要確保伺服器與客戶端一致 "type": "http", "response": &#123; "version": "1.1", "status": "200", "reason": "OK", "headers": &#123; "Content-Type": ["application/octet-stream", "application/x-msdownload", "text/html", "application/x-shockwave-flash"], "Transfer-Encoding": ["chunked"], "Connection": ["keep-alive"], "Pragma": "no-cache" &#125; &#125; &#125; &#125; &#125; &#125;, "outbound": &#123; "protocol": "freedom", "settings": &#123;&#125; &#125;, "outboundDetour": [ &#123; "protocol": "blackhole", "settings": &#123;&#125;, "tag": "blocked" &#125; ], "routing": &#123; "strategy": "rules", "settings": &#123; "rules": [ &#123; "type": "field", "ip": [ "0.0.0.0/8", "10.0.0.0/8", "100.64.0.0/10", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.0.0.0/24", "192.0.2.0/24", "192.168.0.0/16", "198.18.0.0/15", "198.51.100.0/24", "203.0.113.0/24", "::1/128", "fc00::/7", "fe80::/10" ], "outboundTag": "blocked" &#125; ] &#125; &#125;&#125; 1.1.2. 客戶端 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697&#123; "log": &#123; "loglevel": "warning" &#125;, "inbound": &#123; "port": 1080, "protocol": "socks", "domainOverride": ["tls","http"], "settings": &#123; "auth": "noauth" &#125; &#125;, "outbound": &#123; "protocol": "vmess", "settings": &#123; "vnext": [ &#123; "address": "serveraddr.com", "port": 80, "users": [ &#123; "id": "b831381d-6324-4d53-ad4f-8cda48b30811", "alterId": 64 &#125; ] &#125; ] &#125;, "streamSettings": &#123; "network": "tcp", "tcpSettings": &#123; "header": &#123; //這裡的 header 要與伺服器保持一致 "type": "http", "request": &#123; "version": "1.1", "method": "GET", "path": ["/"], "headers": &#123; "Host": ["www.cloudflare.com", "www.amazon.com"], "User-Agent": [ "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.75 Safari/537.36", "Mozilla/5.0 (iPhone; CPU iPhone OS 10_0_2 like Mac OS X) AppleWebKit/601.1 (KHTML, like Gecko) CriOS/53.0.2785.109 Mobile/14A456 Safari/601.1.46" ], "Accept-Encoding": ["gzip, deflate"], "Connection": ["keep-alive"], "Pragma": "no-cache" &#125; &#125; &#125; &#125; &#125; &#125;, "outboundDetour": [ &#123; "protocol": "freedom", "settings": &#123;&#125;, "tag": "direct" &#125; ], "routing": &#123; "strategy": "rules", "settings": &#123; "domainStrategy": "IPIfNonMatch", "rules": [ &#123; "type": "field", "ip": [ "0.0.0.0/8", "10.0.0.0/8", "100.64.0.0/10", "127.0.0.0/8", "169.254.0.0/16", "172.16.0.0/12", "192.0.0.0/24", "192.0.2.0/24", "192.168.0.0/16", "198.18.0.0/15", "198.51.100.0/24", "203.0.113.0/24", "::1/128", "fc00::/7", "fe80::/10" ], "outboundTag": "direct" &#125;, &#123; "type": "chinasites", "outboundTag": "direct" &#125;, &#123; "type": "chinaip", "outboundTag": "direct" &#125; ] &#125; &#125;&#125; TLS從 v1.19 起引入了 TLS，TLS 中文譯名是傳輸層安全，如果你沒聽說過，請 Google 瞭解一下。以下給出些我認為介紹較好的文章鏈結： SSL/TLS 協定運行機制的概述傳輸層安全協定 1.1. 註冊一個域名如果已經註冊有域名了可以跳過。 TLS 需要一個域名，域名有免費的和有付費的，如果你不捨得為一個域名每年花點錢，用個免費域名也可以，但總體來說付費的會優於免費的。為了方便，在本文中我就忽略如何註冊購買域名了。關於如何獲取域名，具體搜索相關文章教程。 註冊好域名之後務必記得添加一個 A 記錄指向你的 VPS! 以下假設註冊的域名為 mydomain.me，請將之替換成自己的域名。 1.2. 證書生成TLS 是證書認證機制，所以使用 TLS 需要證書，證書也有免費付費的，同樣的這裡使用免費證書，證書認證機構為 Let’s Encrypt。 證書的生成有許多方法，這裡使用的是比較簡單的方法：使用 acme.sh 腳本生成，本部分說明部分內容參考於 acme.sh README。 證書有兩種，一種是 ECC 證書（內置公鑰是 ECDSA 公鑰），一種是 RSA 證書（內置 RSA 公鑰）。簡單來說，同等長度 ECC 比 RSA 更安全, 也就是說在具有同樣安全性的情況下，ECC 的密鑰長度比 RSA 短得多（加密解密會更快）。但問題是 ECC 的相容性會差一些，Android 4.x 以下和 Windows XP 不支援。只要您的設備不是非常老的老古董，強烈建議使用 ECC 證書。 以下將給出這兩類證書的生成方法，請大家根據自身的情況自行選擇其中一種證書類型。 證書生成只需在伺服器上操作。 1.2.1. 安裝 acme.sh安裝 EPEL 軟體擴充資源庫： yum install epel-release Let’s Encrypt 憑證取得方式不同與其他網站是在網頁上手動填寫申請資料的，而是須在 Server 上安裝一個 Client（python 寫的），這種作法所帶來的好處是可全自動化，這裡使用 Let’s Encrypt 官方推薦的 Certbot Client，來自動取得、部署和更新 SSL 憑證： yum install certbot 執行以下命令，acme.sh 會安裝到 ~/.acme.sh 目錄下。1234567891011121314151617181920$ curl https://get.acme.sh | sh% Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 671 100 671 0 0 680 0 --:--:-- --:--:-- --:--:-- 679% Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 112k 100 112k 0 0 690k 0 --:--:-- --:--:-- --:--:-- 693k[Fri 30 Dec 01:03:32 GMT 2016] Installing from online archive.[Fri 30 Dec 01:03:32 GMT 2016] Downloading https://github.com/Neilpang/acme.sh/archive/master.tar.gz[Fri 30 Dec 01:03:33 GMT 2016] Extracting master.tar.gz[Fri 30 Dec 01:03:33 GMT 2016] Installing to /home/user/.acme.sh[Fri 30 Dec 01:03:33 GMT 2016] Installed to /home/user/.acme.sh/acme.sh[Fri 30 Dec 01:03:33 GMT 2016] Installing alias to '/home/user/.profile'[Fri 30 Dec 01:03:33 GMT 2016] OK, Close and reopen your terminal to start using acme.sh[Fri 30 Dec 01:03:33 GMT 2016] Installing cron jobno crontab for userno crontab for user[Fri 30 Dec 01:03:33 GMT 2016] Good, bash is found, so change the shebang to use bash as preferred.[Fri 30 Dec 01:03:33 GMT 2016] OK[Fri 30 Dec 01:03:33 GMT 2016] Install success! 安裝成功後執行 source ~/.bashrc 以確保腳本所設置的命令別名生效。 如果安裝報錯，那麼可能是因為系統缺少 acme.sh 所需要的依賴項，acme.sh 的依賴項主要是 netcat(nc)，我們通過以下命令來安裝這些依賴項，然後重新安裝一遍 acme.sh: sudo apt-get -y install netcat 1.2.2. 使用 acme.sh 生成證書證書生成執行以下命令生成證書： 以下的命令會臨時監聽 80 端口，請確保執行該命令前 80 端口沒有使用1234567891011121314151617181920212223242526272829$ sudo ~/.acme.sh/acme.sh --issue -d mydomain.me --standalone -k ec-256[Fri Dec 30 08:59:12 HKT 2016] Standalone mode.[Fri Dec 30 08:59:12 HKT 2016] Single domain='mydomain.me'[Fri Dec 30 08:59:12 HKT 2016] Getting domain auth token for each domain[Fri Dec 30 08:59:12 HKT 2016] Getting webroot for domain='mydomain.me'[Fri Dec 30 08:59:12 HKT 2016] _w='no'[Fri Dec 30 08:59:12 HKT 2016] Getting new-authz for domain='mydomain.me'[Fri Dec 30 08:59:14 HKT 2016] The new-authz request is ok.[Fri Dec 30 08:59:14 HKT 2016] mydomain.me is already verified, skip.[Fri Dec 30 08:59:14 HKT 2016] mydomain.me is already verified, skip http-01.[Fri Dec 30 08:59:14 HKT 2016] mydomain.me is already verified, skip http-01.[Fri Dec 30 08:59:14 HKT 2016] Verify finished, start to sign.[Fri Dec 30 08:59:16 HKT 2016] Cert success.-----BEGIN CERTIFICATE-----MIIEMTCCAxmgAwIBAgISA1+gJF5zwUDjNX/6Xzz5fo3lMA0GCSqGSIb3DQEBCwUAMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQDExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNjEyMjkyMzU5MDBaFw0xNzAzMjkyMzU5MDBaMBcxFTATBgNVBAMTDHdlYWtzYW5kLmNvbTBZMBMGByqGSM49****************************************************************4p40tm0aMB837XQ9jeAXvXulhVH/7/wWZ8/vkUUvuHSCYHagENiq/3DYj4a85Iw9+6u1r7atYHJ2VwqSamiyTGDQuhc5wdXIQxY/YQQqkAmn5tLsTZnnOavc4plANT40zweiG8vcIvMVnnkM0TSz8G1yzv1nOkruN3ozQkLMu6YS7lk/ENBN7DBtYVSmJeU2VAXE+zgRaP7JFOqK6DrOwhyE2LSgae83Wq/XgXxjfIo1Zmn2UmlE0sbdNKBasnf9gPUI45eltrjcv8FCSTOUcT7PWCa3-----END CERTIFICATE-----[Fri Dec 30 08:59:16 HKT 2016] Your cert is in /root/.acme.sh/mydomain.me_ecc/mydomain.me.cer[Fri Dec 30 08:59:16 HKT 2016] Your cert key is in /root/.acme.sh/mydomain.me_ecc/mydomain.me.key[Fri Dec 30 08:59:16 HKT 2016] The intermediate CA cert is in /root/.acme.sh/mydomain.me_ecc/ca.cer[Fri Dec 30 08:59:16 HKT 2016] And the full chain certs is there: /root/.acme.sh/mydomain.me_ecc/fullchain.cer -k 表示密鑰長度，後面的值可以是 ec-256 、ec-384、2048、3072、4096、8192，帶有 ec 表示生成的是 ECC 證書，沒有則是 RSA 證書。在安全性上 256 位的 ECC 證書等同於 3072 位的 RSA 證書。 證書更新由於 Let’s Encrypt 的證書有效期只有 3 個月，因此需要 90 天至少要更新一次證書，acme.sh 腳本會每 60 天自動更新證書。也可以手動更新。 手動更新 ECC 證書，執行： sudo ~/.acme.sh/acme.sh --renew -d mydomain.com --force --ecc 如果是 RSA 證書則執行： sudo ~/.acme.sh/acme.sh --renew -d mydomain.com --force 由於本例中將證書生成到 /etc/v2ray/ 文件夾，更新證書之後還得把新證書生成到 /etc/v2ray。 1.2.3. 安裝證書和密鑰ECC 證書將證書和密鑰安裝到 /etc/v2ray 中： sudo ~/.acme.sh/acme.sh --installcert -d mydomain.me --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --ecc RSA 證書 sudo ~/.acme.sh/acme.sh --installcert -d mydomain.me --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key 注意：無論什麼情況，密鑰 (即上面的 v2ray.key) 都不能洩漏，如果你不幸洩漏了密鑰，可以使用 acme.sh 將原證書吊銷，再生成新的證書，吊銷方法請自行參考 acme.sh 的手冊 1.3. 配置 V2Ray1.3.1. 伺服器123456789101112131415161718192021222324252627282930&#123; "inbound": &#123; "port": 443, // 建議使用 443 端口 "protocol": "vmess", "settings": &#123; "clients": [ &#123; "id": "23ad6b10-8d1a-40f7-8ad0-e3e35cd38297", "alterId": 64 &#125; ] &#125;, "streamSettings": &#123; "network": "tcp", "security": "tls", // security 要設置為 tls 才會啟用 TLS "tlsSettings": &#123; "certificates": [ &#123; "certificateFile": "/etc/v2ray/v2ray.crt", // 證書文件 "keyFile": "/etc/v2ray/v2ray.key" // 密鑰文件 &#125; ] &#125; &#125; &#125;, "outbound": &#123; "protocol": "freedom", "settings": &#123;&#125; &#125;&#125; 1.3.2. 客戶端12345678910111213141516171819202122232425262728293031&#123; "inbound": &#123; "port": 1080, "protocol": "socks", "domainOverride": ["tls","http"], "settings": &#123; "auth": "noauth" &#125; &#125;, "outbound": &#123; "protocol": "vmess", "settings": &#123; "vnext": [ &#123; "address": "mydomain.me", // tls 需要域名，所以這裡應該填自己的域名 "port": 443, "users": [ &#123; "id": "23ad6b10-8d1a-40f7-8ad0-e3e35cd38297", "alterId": 64 &#125; ] &#125; ] &#125;, "streamSettings": &#123; "network": "tcp", "security": "tls" // 客戶端的 security 也要設置為 tls &#125; &#125;&#125; 1.4. 驗證一般來說，按照以上步驟操作完成，V2Ray 客戶端能夠正常聯網說明 TLS 已經成功啟用。但要是有個可靠的方法來驗證是否正常開啟 TLS 無疑更令人放心。 驗證的方法有很多，我僅介紹一種小白化一點的，便是 Qualys SSL Labs’s SSL Server Test。 注意：使用 Qualys SSL Labs’s SSL Server Test 要求使用 443 端口，意味著你伺服器配置的 inbound.port 應當是 443 打開 Qualys SSL Labs’s SSL Server Test，在 Hostname 中輸入你的域名，點提交，過一會結果就出來了。 WebSocketWebSocket 的配置其實很簡單，就跟 mKCP 一樣把 network 一改就行了。話不多說，直接上配置。 1.1. 配置1.1.1. 伺服器配置123456789101112131415161718192021&#123; "inbound": &#123; "port": 16823, "protocol": "vmess", "settings": &#123; "clients": [ &#123; "id": "b831381d-6324-4d53-ad4f-8cda48b30811", "alterId": 64 &#125; ] &#125;, "streamSettings": &#123; "network":"ws" &#125; &#125;, "outbound": &#123; "protocol": "freedom", "settings": &#123;&#125; &#125;&#125; 1.1.2. 客戶端配置123456789101112131415161718192021222324252627282930&#123; "inbound": &#123; "port": 1080, "protocol": "socks", "domainOverride": ["tls","http"], "settings": &#123; "auth": "noauth" &#125; &#125;, "outbound": &#123; "protocol": "vmess", "settings": &#123; "vnext": [ &#123; "address": "serveraddr.com", "port": 16823, "users": [ &#123; "id": "b831381d-6324-4d53-ad4f-8cda48b30811", "alterId": 64 &#125; ] &#125; ] &#125;, "streamSettings":&#123; "network":"ws" &#125; &#125;&#125; WebSocket+TLS+Web前文分別提到過 TLS 和 WebSocket 的配置方法，而本文搭配 Web 服務並同時實現 TLS 和 WebSocket。關於 Web 的軟件本文給出了 Nginx 和 Caddy 兩個例子，二選一即可，也可以選用其他的軟件（如 Apache）。 很多新手一接觸 V2Ray 就想搞 WebSocket+TLS+Web 或 WebSocket+TLS+Web+CDN，我就想問 ssh 和 vim/nano 用利索了沒，步子這麼大不怕扯到蛋嗎？使用 Nginx/Caddy 是因為 VPS 已經有 Nginx/Caddy 可以將 V2Ray 稍作隱藏，使用 WebSocket 是因為搭配 Nginx/Caddy 只能用 WebSocket，使用 TLS 是因為可以流量加密，看起來更像 HTTPS。 也許 WebSocket+TLS+Web 的配置組合相對較好，但不意味著這樣的配置適合任何人。因為本節涉及 Nginx 和 Caddy，只給出了配置示例而不講具體使用方法，也就是說你在閱讀本節內容前得會使用這兩個軟件的其中之一，如果你還不會，請自行 Google。 注意: V2Ray 的 Websocket+TLS 配置組合並不依賴 Nginx 或 Caddy，只是能與其搭配使用而已，沒有它們也可以正常使用。 1.1. 配置這次 TLS 的配置將寫入 Nginx 或者 Caddy 配置中，由這些軟件來監聽 443 端口，然後將其轉發到 V2Ray 的 WebSocket 所監聽的內網端口，V2Ray 伺服器端不需要配置 TLS。 1.1.1. 伺服器配置12345678910111213141516171819202122232425&#123; "inbound": &#123; "port": 10000, "listen":"127.0.0.1",//只監聽 127.0.0.1，避免除本機外的機器探測到開放了 10000 端口 "protocol": "vmess", "settings": &#123; "clients": [ &#123; "id": "b831381d-6324-4d53-ad4f-8cda48b30811", "alterId": 64 &#125; ] &#125;, "streamSettings": &#123; "network": "ws", "wsSettings": &#123; "path": "/ray" &#125; &#125; &#125;, "outbound": &#123; "protocol": "freedom", "settings": &#123;&#125; &#125;&#125; 1.1.2. Nginx 配置配置中使用的是域名和證書使用 TLS 小節的舉例，請替換成自己的。 1234567891011121314151617server &#123; listen 443 ssl; ssl on; ssl_certificate /etc/v2ray/v2ray.crt; ssl_certificate_key /etc/v2ray/v2ray.key; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers HIGH:!aNULL:!MD5; server_name mydomain.me; location /ray &#123; proxy_redirect off; proxy_pass http://127.0.0.1:10000;#假設WebSocket監聽在環回位址的10000端口上 proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection "upgrade"; proxy_set_header Host $http_host; &#125;&#125; 1.1.3. Caddy 配置因為 Caddy 會自動申請證書並自動更新，所以使用 Caddy 不用指定證書、密鑰。12345678mydomain.me&#123; log ./caddy.log proxy /ray localhost:10000 &#123; websocket header_upstream -Origin &#125;&#125; 1.1.4. 客戶端配置123456789101112131415161718192021222324252627282930313233343536&#123; "inbound": &#123; "port": 1080, "listen": "127.0.0.1", "protocol": "socks", "domainOverride": ["tls","http"], "settings": &#123; "auth": "noauth", "udp": false &#125; &#125;, "outbound": &#123; "protocol": "vmess", "settings": &#123; "vnext": [ &#123; "address": "mydomain.me", "port": 443, "users": [ &#123; "id": "b831381d-6324-4d53-ad4f-8cda48b30811", "alterId": 64 &#125; ] &#125; ] &#125;, "streamSettings": &#123; "network": "ws", "security": "tls", "wsSettings": &#123; "path": "/ray" &#125; &#125; &#125;&#125; 1.1.5. 注意事項 較低版本的 nginx 的 location 需要寫為 /ray/ 才能正常工作 如果在設置完成之後不能成功使用，可能是由於 SElinux 機制 (如果你是 CentOS 7 的用戶請特別留意 SElinux 這一機制) 阻止了 Nginx 轉發向內網的資料。如果是這樣的話，在 V2Ray 的日誌裡不會有訪問資訊，在 Nginx 的日誌裡會出現大量的 “Permission Denied” 欄位，要解決這一問題需要在終端下鍵入以下命令： setsebool -P httpd_can_network_connect 1 請保持伺服器和客戶端的 wsSettings 嚴格一致，對於 V2Ray，/ray 和 /ray/ 是不一樣的 1.1.6. 其他的話 開啟了 TLS 之後 path 參數是被加密的，GFW 看不到； 主動探測一個 path 產生 Bad request 不能證明是 V2Ray； 不安全的因素在於人，自己的問題就不要甩鍋，哪怕我把示例中的 path 改成一個 UUID，依然有不少人原封不動地 COPY； 使用 Header 分流並不比 path 安全， 不要迷信。 HTTP/2簡單地說 HTTP/2 是 HTTP/1.1 的升級版（目前大多數網頁還是 HTTP/1.1），點擊這裡可以直觀地體會到 HTTP/2 相比於 HTTP/1.1 的提升（不代表 V2Ray 中 HTTP/2 相對於 TCP 的提升就是這樣的）。 在 V2Ray 的手冊中並沒有 HTTP/2 的相關內容，而且 V2Ray 的 HTTP/2 還處於測試階段。 1.1. 配置最近幾版的 V2Ray 已經開始支援 HTTP/2，可能 v3.12 就支援了，實測 v3.14 能夠使用 HTTP/2 了。與其他的傳輸層協定一樣在 streamSettings 中配置。 1.1.1. 伺服器配置123456789101112131415161718192021222324252627282930313233&#123; "inbound": &#123; "port": 443, "protocol": "vmess", "settings": &#123; "clients": [ &#123; "id": "b831381d-6324-4d53-ad4f-8cda48b30811", "alterId": 64 &#125; ] &#125;, "streamSettings": &#123; "network": "h2", // h2 也可寫成 http，效果一樣 "httpSettings": &#123; //此項是關於 HTTP/2 的設置 "path": "/ray" &#125;, "security": "tls", // 配置tls "tlsSettings": &#123; "certificates": [ &#123; "certificateFile": "/etc/v2ray/v2ray.crt", // 證書文件，詳見 tls 小節 "keyFile": "/etc/v2ray/v2ray.key" // 密鑰文件 &#125; ] &#125; &#125; &#125;, "outbound": &#123; "protocol": "freedom", "settings": &#123;&#125; &#125;&#125; 1.1.2. 客戶端配置123456789101112131415161718192021222324252627282930313233343536&#123; "inbound": &#123; "port": 1080, "listen": "127.0.0.1", "protocol": "socks", "domainOverride": ["tls","http"], "settings": &#123; "auth": "noauth", "udp": false &#125; &#125;, "outbound": &#123; "protocol": "vmess", "settings": &#123; "vnext": [ &#123; "address": "mydomain.me", "port": 443, "users": [ &#123; "id": "b831381d-6324-4d53-ad4f-8cda48b30811", "alterId": 64 &#125; ] &#125; ] &#125;, "streamSettings": &#123; "network": "h2", "httpSettings": &#123; //此項是關於 HTTP/2 的設置 "path": "/ray" &#125;, "security": "tls" &#125; &#125;&#125; 不推薦的配置也許有一部分朋友發現了，高級篇的內容關於傳輸層的，各種配置的組合，可以搭配出非常多的配置。但是，有一些組合是我認為不值得或者是冗餘的（僅代表個人意見），以下給出。 TLS+KCP這是相當一部分人喜歡的組合，不推薦的原因是 vmess 本身的加密方式已經足夠，加 TLS 只是多消耗設備算力，尤其是移動設備，TLS 也不在最外層，已經失去大部分人使用 TLS 的初衷。 TLS+HTTP 偽裝這並沒有什麼卵用，這樣的組合不是 HTTPS。 單純使用 Websocket理論上，使用 Websocket 會比 TCP 性能差一些，所以如果不是搭配 CDN、nginx 或者在 PaaS 上使用，那還是使用 TCP 吧。 透明代理透明代理是什麼意思請自行 Google，在這兒指使用 V2Ray 做透明代理實現路由器翻牆。然而，我個人認為路由器翻牆的說法並不準確，應該叫閘道翻牆。所以本例實際上是關於閘道翻牆的內容。當然了，單純使用路由器翻牆也是可以的，因為普通的家用路由器本就是一個閘道。使用閘道翻牆可以使局域網內的所有設備都具有直接翻牆的能力，並且能夠全局代理，而不必每台設備都安裝 V2Ray，配置更新時只需在閘道修改配置，用一些網友的話說就是就感覺沒有牆一樣。但是，有意上透明代理的同學請評估一下透明代理是否合適自己，而不要盲目跟風。 透明代理適用於以下情況： 局域網設備較多，比如說辦公室、實驗室、子孫滿堂的家庭等； 設備 (的軟件) 無法 / 不方便設置代理，比如說 chromecast、電視盒子等； 希望設備的所有軟件都走代理。不適用於： 隨便拿個垃圾路由器就想上的 1.1. 優點其實，V2Ray 早就可以作透明代理，當時我也研究了好一段時間，最終是折騰出來了。但是由於 DNS 的問題，我用著總感覺不太舒服。雖然有 ChinaDNS 這類的解決方案，但個人主觀上並不喜歡。 不過嘛，現在就不一樣了。就目前來說，使用 V2Ray 透明代理： 解決了牆外 DNS 污染問題； 在解決了 1 的情況下國內域名的即能夠解析到國內 CDN； 不需要外部軟件或自建 DNS 就可決絕 1 和 2 的問題，只要系統支援 V2Ray 和 iptables； 能夠完美利用 V2Ray 強大而靈活的路由功能，而不必額外維護一個路由表； 1.2. 軟硬體準備 一台已經搭建 V2Ray 並能正常使用的 VPS ，本文假設 IP 為 110.231.43.65； 一台帶 iptables、有 root 權限並且系統為 Linux 的設備，假設位址為 192.168.1.22，已經配置好 V2Ray 作為客戶端。這個設備可以是路由器、開發板、個人電腦、虛擬機和 Android 設備等，更具普適性地稱之為閘道。我個人非常不建議使用 MT7620 系路由器開透明代理，性能太差了，很多固件也沒有開啟 FPU 。要是真不願意出這點錢，用電腦開個虛擬機吧 (我就是這麼幹的)，VirtualBox、Hyper 之類的都可以，但是別忘了網路模式用網橋。 1.3. 設置步驟 設置步驟如下，假設使用 root。 閘道開啟 IP 轉發。在 /etc/sysctl.conf 文件添加一行 net.ipv4.ip_forward=1 ，執行下列命令生效： sysctl -p 路由器 DHCP 設定閘道位址為閘道設備的 IP，本例為 192.168.1.22，或者電腦手機等設備單獨設置閘道位址，但閘道設備必須指定閘道位址為路由器的 IP，然後電腦 / 手機測試是不是可以正常上網 (這時還不能翻牆)，如果不能上網先去學習一個把這個搞定，否則接下來再怎麼也同樣上不了網。 在伺服器和閘道安裝 V2Ray（如果不會就參照前面的教程，由於 GFW 會惡化 GitHub Releases 的流量，閘道直接運行腳本幾乎無法安裝，建議從 https://v2ray.com/download 下載然後使用 –local 參數進行安裝），並配置好配置文件。一定要確定搭建的 V2Ray 能夠正常使用。在閘道執行 curl -x socks5://127.0.0.1:1080 google.com測試配置的 V2Ray 是否可以翻牆 (命令中 socks5 指 inbound 為 socks，1080 指該 inbound 端口是 1080)。如果出現類似下面的輸出則可以翻牆，如果沒有出現就說明翻不了，你得仔細檢查以下哪步操作不對或漏了。 123456&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;&lt;TITLE&gt;301 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;H1&gt;301 Moved&lt;/H1&gt;The document has moved&lt;A HREF="http://www.google.com/"&gt;here&lt;/A&gt;.&lt;/BODY&gt;&lt;/HTML&gt; 在閘道的配置，添加 dokodemo ，並開啟 domain override（注意不要寫錯配置）。配置形如：123456789101112131415161718&#123; "inbound": &#123;...&#125;, "outbound": &#123;...&#125;, "inboundDetour": [ &#123; "domainOverride": ["tls","http"], "port": 12345, "protocol": "dokodemo-door", "settings": &#123; "network": "tcp,udp", "followRedirect": true &#125; &#125;, ... ], "outboundDetour": [...], "routing": &#123;...&#125;&#125; 設定 iptables 規則，命令如下1234iptables -t nat -N V2RAYiptables -t nat -A V2RAY -d 192.168.0.0/16 -j RETURNiptables -t nat -A V2RAY -p tcp -j REDIRECT --to-ports 12345iptables -t nat -A PREROUTING -p tcp -j V2RAY UDP 流量透明代理的 iptables 規則，命令如下123456ip rule add fwmark 1 table 100ip route add local 0.0.0.0/0 dev lo table 100iptables -t mangle -N V2RAY_MASKiptables -t mangle -A V2RAY_MASK -d 192.168.0.0/16 -j RETURNiptables -t mangle -A V2RAY_MASK -p udp -j TPROXY --on-port 12345 --tproxy-mark 1iptables -t mangle -A PREROUTING -p udp -j V2RAY_MASK 使用電腦 / 手機直接訪問被牆網站，這時應當可以訪問的（如果不能，你可能得請教大神手把手指導了）。 寫腳本開機載入上述的 iptables，或者使用第三方軟件 (如 iptables-persistent)，否則閘道重啟後 iptables 會失效 (即透明代理會失效)。 1.4. 注意事項 在上面的設置中，假設訪問了國外網站，如 Google 等，閘道依然會使用的系統 DNS 進行查詢，只不過返回的結果是污染過的，而 V2Ray 提供的 domain override 能夠從流量中提取域名資訊交由 VPS 解析。也就是說，每次打算訪問被牆的網站，DNS 提供商都知道，鑑於國內企業尿性，也許 GFW 也都知道，會不會將這些資料收集喂 AI 也未可知。解決辦法是建一個 DNS，不向上級查詢，直接返回一個錯誤的 IP，反正 V2Ray 能夠解決污染問題。如果有朋友知道有什麼這樣的軟件，請告之 (可以使用 dnsmasq 實現)。 domain override 目前只能從 TLS 和 HTTP 流量中提取域名，如果上網流量有非這兩種類型的慎用 domain override 解決 DNS 污染。 由於對 iptables 不熟，我省略掉了對 UDP 流量的透明代理的設置，請精通此道的朋友補充一下 (目前 V2Ray 對 UDP 透明代理的實現有些問題，網路流量有大量 UDP 的網友請慎用)。 V2Ray 只能代理 TCP/UDP 的流量，ICMP 不支援，即就算透明代理成功了之後 ping Google 這類網站也是不通的。 最好設定閘道的位址為靜態 IP，否則閘道重啟後換了 IP 上不了網會很尷尬 上述的 iptables 配置只能使局域網內的其他設備翻牆，閘道本身是無法翻牆的，如果要閘道也能翻牆，要使用 iptables 的 owener 模組直連 V2Ray 發出的流量，然後執行 iptables -t nat -A OUTPUT -p tcp -j V2RAY。 按照網上的透明代理教程，設置 iptables 肯定要 RETURN 127.0.0.0/8 這類私有位址，但我個人觀點是放到 V2Ray 的路由裡好一些。 Docker 部署 V2RayDocker 技術是一種新的虛擬化技術，和傳統的虛擬化技術不同。V2Ray 同樣提供 Docker 部署方式，並且通過 Docker 來部署 V2Ray 會非常輕鬆高效。 Docker 只能部署在 KVM 或者 XEN 架構的 VPS 中 首先安裝 Docker： sudo apt-get install -y docker 安裝完 Docker 後我們從 DockerHub 通過搜索找到 V2Ray 官方提供的鏡像， 鏈結在此. 找到拉取鏡像的的命令並複製下來，在網頁右側我們可以看到命令為 docker pull v2ray/official ，我們將其複製下來回到命令行中粘貼並執行： sudo docker pull v2ray/official 待 V2Ray 的 Docker 鏡像拉取完成後就可以進入下一個部署階段. 在此之前，你需要在 /etc 目錄下新建一個文件夾 v2ray， 並把你的配置寫好後命名為 config.json 放入 v2ray 文件夾內. 待配置文件準備就緒後鍵入以下命令進行部署，部署前請記下配置文件中你所設置的端口號，在部署時需要將其映射到宿主機上. 否則將無法訪問. 此處假設設定的端口號為 8888，需要映射到宿主機的 8888 端口上. 則命令為： sudo docker run -d --name v2ray -v /etc/v2ray：/etc/v2ray -p 8888:8888 v2ray/official v2ray -config=/etc/v2ray/config.json 鍵入以上命令後，命令行會出現一串字符，代表容器部署成功，可以立即通過客戶端連接並開始使用了. 如果還不放心，鍵入以下命令來查看容器的運行狀態： sudo docker container ls 如果看到輸出的結果中有以下欄位代表容器成功運行：123$ docker container lsCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES2a7sdo87kdf3 v2ray/official "v2ray -config=/et..." 3 minutes ago Up 3 minutes 0.0.0.0：8888-&gt;8888/tcp v2ray 通過以下命令來啟動 V2Ray： sudo docker container start v2ray 停止 V2Ray： sudo docker container stop v2ray 重啟 V2Ray： sudo docker container restart v2ray 查看日誌： sudo docker container log v2ray 更新配置後，需要重新部署容器，命令如下： sudo docker container stop v2ray sudo docker container rm v2ray sudo docker run -d --name v2ray -v /etc/v2ray：/etc/v2ray -p 8888：8888 v2ray/official v2ray -config=/etc/v2ray/config.json 假如你的配置換了端口號，那麼相應的端口映射也要更改，假如你在配置文件中把監聽端口改為了 9999，則’-p’參數應該這樣寫： -p 9999:9999 假如你想將容器中的端口映射到本機的端口，則命令應該這樣寫 -p 127.0.0.1:端口號:端口號 除非你打算使用 Nginx 來轉發 Websocket 否則不需要映射到本地，直接填寫端口號：端口號的形式即可 另外，如果開啟了動態端口，-p 標記可以多次使用來綁定多個端口. 具體用法是在指令中再加上多個 -p 標記即可。 更新 V2Ray 的 Docker 鏡像： docker pull v2ray/official 更新完之後，你需要重新部署容器，方法見上。 BBR需注意此方法無法和 WebSock 轉發併用 作者5網上限定說記憶體需要 1G 大小，最小也需要 128M，經過我的折騰發現，128M 小記憶體 VPS 有時候並不如意，即使安裝好了 UML 也進不去系統，這就很讓人捉急，但是還好有了 LKL，比 UML 更加的方便，今天的教程就是教大家使用小記憶體 VPS 安裝 LKL+v2ray 體驗極速上網。 開始首先還是一點，你需要 VPS，本次教程環境是 openvz，如果你沒有，那就可以去買個 KVM 框架的 VPS，免去折騰推薦 BBR 一鍵安裝 + 小白翻牆教程服務搭建已經寫在教程中。 本次教程環境debian8 mini 128M 記憶體 + 20 端口轉發 NET 連接 SSHWindows 推薦使用 putty 或者 Xshell，這裡不多贅述。 安裝 LKLwget –no-check-certificate https://github.com/91yun/uml/raw/master/lkl/install.sh &amp;&amp; bash install.sh 判斷是否安裝成功 ping 10.0.0.2 如果能 ping 通就說明安裝成功，否則失敗 修改轉發端口修改 /root/lkl/run.sh ，查找 9000-9999 ，改成你想要的端口段 修改 /root/lkl/haproxy.cfg 查找 9000-9999 ，改成你想要的端口段 重啟 vps 安裝 v2ray這裡要注意一下，安裝 v2ray 的端口要在 LKL 轉發的端口範圍內，否則安裝 LKL 也無用。 Nginx 安裝參考78 service httpd stop yum install epel-release yum -y install nginx service nginx start 設定位置 nano /etc/nginx/nginx.conf mkdir -p /var/www/yourdomain.com/public_html Let’s create a test index.html in this directory so that we have something to look at when we test the configuration later: nano /var/www/yourdomain.com/public_html/index.html All we need is a simple line of text to show that the connection is working: Hello world! Close and save the index.html file. We need to set permissions for this folder so that it can be viewed by the outside world: chmod 755 /var/www/yourdomain.com/public_html 更改設定檔中的 location / { 為 /var/www/yourdomain.com/public_html Let’s Encrypt 安裝參考910 yum install epel-release yum install certbot yum -y install yum-utils yum-config-manager –enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional certbot –nginx certbot –nginx certonly certbot renew --dry-run 證書儲存在： ssl_certificate: /etc/letsencrypt/live/你的網域/fullchain.pem; ssl_certificate_key: /etc/letsencrypt/live/你的網域/privkey.pem NGINX SSL/TLS 設定： 可使用 Security/Server Side TLS – MozillaWiki 提供的介面，自動產生 Apache、NGINX HTTP 網頁伺服器的設定檔 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748[root@img ~]# vi /etc/nginx/conf.d/default.conf... 以上省略 ... server &#123; # 使用 https 和 http/2 協定 listen 443 ssl http2; # 上述的 IPv6 方式 listen [::]:443 ssl http2; # 網站網址 server_name img.yummygo.com.tw; # 網站根目錄 root /var/nginx/html; # # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate # # SSL 憑證證書路徑 ssl_certificate /etc/letsencrypt/live/img.yummygo.com.tw/fullchain.pem; # 私鑰路徑 ssl_certificate_key /etc/letsencrypt/live/img.yummygo.com.tw/privkey.pem; # 緩存有效期 ssl_session_timeout 1d; # 緩存憑證類型和大小 ssl_session_cache shared:SSL:50m; # # intermediate configuration. tweak to your needs. # # 使用的加密協定 ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # 加密演演算法，越前面的優先級越高 ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS'; # 交握過程使用 Server 的首選加演演算法，這裡使用 Client 為首選 ssl_prefer_server_ciphers on; # # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months) # # 增加 http header add_header Strict-Transport-Security max-age=15768000;&#125; 重新啟動 NGINX： [root@img ~]# systemctl restart nginx 防火牆設定設定 firewall 允許 https service（Posr 443）： [root@img ~]# firewall-cmd –permanent –add-service=https –zone=public [root@img ~]# firewall-cmd –reload 自動續期憑證Let’s Encrypt 免費 SSL/TLS 憑證有效期僅有三個月，因此設定排程來自動續期： [root@img ~]# vi /etc/crontab 12# 每月 1 日 03:00 續期憑證，並重啟 Nginx00 03 1 * * root /usr/bin/certbot renew --quiet &amp;&amp; /bin/systemctl restart nginx Proxifier全局代理 KCP介紹轉自官方，參考11 KCP 是一個快速可靠協定，能以比 TCP 浪費 10%-20% 的帶寬的代價，換取平均延遲降低 30%-40%，且最大延遲降低三倍的傳輸效果。純演算法實現，並不負責底層協定（如 UDP）的收發。 技術特性TCP 是為流量設計的（每秒內可以傳輸多少 KB 的資料），講究的是充分利用帶寬。而 KCP 是為流速設計的（單個資料包從一端發送到一端需要多少時間），以 10%-20% 帶寬浪費的代價換取了比 TCP 快 30%-40% 的傳輸速度。TCP 通道是一條流速很慢，但每秒流量很大的大運河，而 KCP 是水流湍急的小激流。KCP 有正常模式和快速模式兩種，通過以下策略達到提高流速的結果： RTO 翻倍 vs 不翻倍：TCP 超時計算是 RTOx2，這樣連續丟三次包就變成 RTOx8 了，十分恐怖，而 KCP 啟動快速模式後不 x2，只是 x1.5（實驗證明 1.5 這個值相對比較好），提高了傳輸速度。 選擇性重傳 vs 全部重傳：TCP 丟包時會全部重傳從丟的那個包開始以後的資料，KCP 是選擇性重傳，只重傳真正丟失的資料包。 快速重傳：發送端發送了 1,2,3,4,5 幾個包，然後收到遠端的 ACK: 1, 3, 4, 5，當收到 ACK3 時，KCP 知道 2 被跳過 1 次，收到 ACK4 時，知道 2 被跳過了 2 次，此時可以認為 2 號丟失，不用等超時，直接重傳 2 號包，大大改善了丟包時的傳輸速度。 延遲 ACK vs 非延遲 ACK：TCP 為了充分利用帶寬，延遲發送 ACK（NODELAY 都沒用），這樣超時計算會算出較大 RTT 時間，延長了丟包時的判斷過程。KCP 的 ACK 是否延遲發送可以調節。 UNA vs ACK+UNA：ARQ 模型回應有兩種，UNA（此編號前所有包已收到，如 TCP）和 ACK（該編號包已收到），光用 UNA 將導致全部重傳，光用 ACK 則丟失成本太高，以往協定都是二選其一，而 KCP 協定中，除去單獨的 ACK 包外，所有包都有 UNA 資訊。 非退讓流控：KCP 正常模式同 TCP 一樣使用公平退讓法則，即發送視窗大小由：發送緩存大小、接收端剩餘接收緩存大小、丟包退讓及慢啟動這四要素決定。但傳送及時性要求很高的小資料時，可選擇通過配置跳過後兩步，僅用前兩項來控制發送頻率。以犧牲部分公平性及帶寬利用率之代價，換取了開著 BT 都能流暢傳輸的效果。 DNS CAA以後有機會再使用給你的站點添加 DNS CAA 保護 記錄：OpenConnet Server (ocserv) 通過實現 Cisco 的 AnyConnect 協議，用 DTLS 作為主無協議，UPD DTLS 失敗時會轉用 TCP TLS。1購買 BanwagonHOST VPS 自建 Shadowsocks 記錄 1.加設 OpenConnect Server 給 iPhone 提供更順暢的網路生活 ↩2.Project V 安裝 ↩3.V2ray 白話教程 ↩4.通用唯一識別碼 ↩5.openVZ 框架安裝 LKL+v2ray 讓你閒置的小記憶體 VPS 翻牆 ↩6.傳輸層 ↩7.How to install and configure NGINX on CentOS 7 ↩8.CentOS 7 安裝與設定 Nginx + MariaDB + PHP + phpMyAdmin（LEMP） ↩9.CentOS 7 Let’s Encrypt 免費 SSL/TLS 憑證 HTTPS 設置 for NGINX ↩10.Cerbot ↩11.v2ray - 比 Shadowsocks 更強大更複雜的替代品 ↩12.用 Nginx 轉發 V2Ray 的 WebSocket 連接 ↩13.翻牆和匿名與網路安全類科普文大集合 ↩]]></content>
      <tags>
        <tag>GFW</tag>
        <tag>VPN</tag>
        <tag>V2Ray</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SDN 筆記]]></title>
    <url>%2Fposts%2F2a39%2F</url>
    <content type="text"><![CDATA[SDN (Software-defined networking) 是利用 Data link Layer 層中的 OpenFlow 協定1，將 Forwording 的硬體和控制行為分離，而得設置 Programmable network (程式化的網路行為), 比起用 ACL 和路由協定，能作更複雜的管理2。資料來源2SDN 將網路架構簡化為封包轉送硬體與網路決策控制器 (decision-making network controller) 二個單元，其中封包轉送硬體由(1) 包含了條目 (entry) 以及對於活躍的流程 (active flows) 所必須採取的行動的流程表 (flow table)；(2) 以及能夠與控制器經由安全的通道溝通對於尚未在流程表上的新條目所必須採取行動的階層 (layer) 所構成。 1. 現存的 SDN 架構 ForCES 與 OpenFlow 為前最具影響力的主流 SDN 介面，二者皆遵守 SDN 的基本精神，也就是將資料傳輸與控制單元分離以及使得兩者經由安全通道交換訊息；但二者在架構、封包轉送模式與通訊協定介面上有顯著的不同。 2. ForCES 由 IETF ForCES(Forwarding and Control Element Separation) Working Group 所提出，將網路元件內部重新定義為控制單元以及封包轉送單元分離的架構，但網路元件依然被視為一個個體；如此一來不但網路元件巨觀上與傳統網路元件極為類似，控制單元的決策亦可由第三方軟體來控制。ForCES 定義了一個稱為稱為 Forwarding Element(FE)，實施 ForCES 通訊協定的邏輯個體 (logic entity)，負責利用其下層的硬體處理封包；一個負責執行控制訊號函數的邏輯個體稱為 Control Element(CE)，告訴 FE 如何處理封包；另外一個在 FE 上、被 CE 根據 ForCES 通訊協定所控制的函數區塊稱為 Logical Function Block(LFB)，允許 CE 控制 FE 的組態。 3. OpenFlow在 OpenFlow 的架構中，封包轉送裝置稱為 OpenFlow Switch，包含了一個或多個流程表，流程表由流程條目 (flow entry) 所組成，由它們決定屬於一個流程的封包應該如何處理與轉送。流程條目由(1) 配對區域 (match fields)：配對流入封包位於標頭區 (header) 的資訊。(2) 計數器 (counters)：蒐集特定流程的資料，例如接收封包數、封包大小、流程持續時間等。(3) 採取的動作：封包符合配對的話應該採取處理封包的動作所組成。 當 OpenFlow Switch 接收到一個封包時，它會解開封包的標頭區並根據流程表進行配對，若配對未通過則進行至下一個流程表，直到通過配對並決定應該採取的動作為止；如果該封包沒有通過任何一個流程表的配對，所採取的動作將由表上無名流程條目 (table-miss flow entry) 決定，這個條目尚包含的動作可能是丟棄封包、將封包經由 OpenFlow 的頻道 (channel) 傳給控制元件等。 其它 SDN 是由 SUN 在1995年首次提出。OpenFlow 是由 2008 年在史丹褔大學開使。IBM 的控制器為 PNC (Programmable Network Controller)Cisco 的 OF 控制器為 Cisco XNCCisco ONE (Cisco Open Network Environment) 提供開放 API 讓開發人員可使用自已熟悉的語言開發符合企業網路管理的應用3Microsoft 的網路虛擬化協定 NVGRE (Network Virtualization using Generic Routing Encapsulation)IBM 的網路虛擬化協定 DOVE (Distributed Overlay Virtual Ethernet)VMware 的網路虛擬化協定VXLAN (Virtual eXtensible Local Area Network) Nicira 被 VMware 收購，而其創辨人參與了 OF 的制定和發展，SDN 解決方案為 NVP (Network Virtualization Platform) ，NTT、AT&amp;T、ebay 皆是其客戶3 資料來源： 1.SDN Wiki ↩2.軟體定義網路架構簡介 ↩3.3種SDN架構的産品策略 ↩]]></content>
      <tags>
        <tag>MIS</tag>
        <tag>SDN</tag>
        <tag>OVSDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[學習單]]></title>
    <url>%2Fposts%2F21d4%2F</url>
    <content type="text"><![CDATA[以後學習用的記錄 Trace Grafana Rancher Spunk ELK Docker Probe 系統 SIEM DLP 1.作業系統基礎 CentOS7 mionimal 修改 hostname，查看hostname ，分暫時與永久 ip 修改為固定 ip/dhcp ，查看 gateway, 暫時DNS 停用防火牆，查看開機是否執行 查看系統時間/怎麼看對時，如何強制對時，手動修改時間 查看 SELINUX 狀態，暫時/永久停用 查看現在的 DNS 為何，暫時/水久停用 安裝 telnet，nslookup、man、wget 2.Log 查看系統訊息log 查看目前登入人員，查看目前登入人員正在下什麼指令，查看曾經登入使用者 查看硬體 log 查看 crontab log 查看曾經輸入過的指令 查看誰成功登入，誰失敗登入 cat 最後十筆記錄，最前十筆紀錄，一修改就跳 log 資料夾欄位的意思 root,root 意思 tailgrepOpenResty]]></content>
      <tags>
        <tag>MIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cmder 筆記]]></title>
    <url>%2Fposts%2F89df%2F</url>
    <content type="text"><![CDATA[設定上的記錄，全新安裝後要做的設定 安裝右鍵選單1Cmder.exe /REGISTER ALL 開啟時自動到指定的位置：12setting →Startup:Tasks→+cmd /k "%ConEmuDir%\..\init.bat" -new_console:d:D:\GitHub\Hexo\ 安裝後的調整：中文字體：1Font ，Mani font 下的 Aternative font 加入 CJK 字體，再設置 Unicode ranges 為 CJK 中文亂碼:順便把代碼頁換成 utf-8Startup→Environnment 下，加入12set LANG=zh_CN.UTF-8chcp 65001 無邊框要調整大小需將鼠放在邊框上兩秒，時間可在後方調整1main&gt;&gt; appearence &gt;&gt; hide caption always 避免殘留字默認的為λ，改成常用的$打開\cmder\vendor目錄下面的clink.lua文件，搜索λ，全部替換成$即可！ 增加快捷鍵在 D:\Dropbox\Apps\Cmder\config\user-aliases.cmd 加入123456789101112131415e.=explorer .gl=git log --oneline --all --graph --decorate $*ls=ls --show-control-chars -F --color $*pwd=cdclear=clshistory=cat "%CMDER_ROOT%\config\.history"unalias=alias /d $1vi=vim $*cmderr=cd /d "%CMDER_ROOT%"gc=git commit -am $1sb="D:\Dropbox\Apps\Sublime Text\sublime_text.exe" $1sbl="D:\Dropbox\Apps\Sublime Text\sublime_text.exe" $1 -new_console:s50Hsbl2="D:\Dropbox\Apps\Sublime Text\sublime_text.exe" $1 -new_console:s75Vco="D:\Dropbox\Apps\VSCode\Code.exe" $1em="D:\Dropbox\Apps\EmEditor\EmEditor.exe" $1]]></content>
      <tags>
        <tag>MIS</tag>
        <tag>cmd</tag>
        <tag>install</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 改本機密碼]]></title>
    <url>%2Fposts%2F8a4a%2F</url>
    <content type="text"><![CDATA[剛好遇到，小記一下。用開機光碟修改，以便在鎖定畫面叫出 cmd 改密碼。用開機光碟，不要按下一步，用指令叫出 cmd1shift + F10 用 diskpart 查看分區1diskpart 將螢幕小鍵盤改成 cmd123456cd windows\system32copy cmd.exe cmd.exe.oricopy osk.exe osk.exe.oridel osk.exeren cmd.exe osk.exeshutdown –r –t 00 或12copy C:\windows\system32\sethc.exe c:\copy /y c:\windows\system32\cmd.exe c:\windows\system32\sethc.exe (登入界面按五次 shift ) 重開機後，點右下角的“輕鬆讀取”，點螢幕小鍵盤，用 net user 改密碼的指令1net user 帳號 * 完成後按 exit 離開。 之後預定：123456&lt;html&gt;&lt;H3&gt;中間人&lt;/H3&gt;&lt;form&gt;&lt;input type="file" name="datafile" size="40"&gt;&lt;/form&gt;&lt;/html&gt;]]></content>
      <tags>
        <tag>cmd</tag>
        <tag>windows</tag>
        <tag>crack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[維運指令備忘]]></title>
    <url>%2Fposts%2F283f%2F</url>
    <content type="text"><![CDATA[記錄 CMD 、能直接執行的命令、控制台快捷鍵 CMDCmd 用檔案總管開啟當前資料夾 start .檔案總管用 Cmd 開啟當前資料夾 shift + 右鍵位置列輸入 cmdRun開啟指令為 win + r創建新捷徑 rundll32.exe shell32.dll,Control_RunDLL ncpa.cpl命令 功能calc 小算盤gpedit.msc 群組mstsc 遠端桌面services.msc 服務control userpasswords2 自動登入netplwiz 自動登入lusrmgr.msc 本機使用者和群組certmgr.msc 憑證管理perfmon.msc 效能監視器裝置管理員 devmgmt.msc電腦管理 compmgmt.mscwinver 查看 windows 版本群組原則物件編輯器 gpedit.mscftype 查看、設定副檔名的關聯控制台 指令ncpa.cpl 控制台：網路連線sysdm.cpl 系統appwize.cpl 新增程式網際網路 inetcpl.cpl電源選項 powercfg.cpl資料夾選項 control folders 命令列工具工具 功能systeminfo 系統祥細訊息net use 查看網路連線net user 查看本機帳號whoami 查看當前帳號狀態]]></content>
      <tags>
        <tag>MIS</tag>
        <tag>CMD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + GitHub 搭建記錄]]></title>
    <url>%2Fposts%2F3e4b%2F</url>
    <content type="text"><![CDATA[作為第一篇記錄，圖片等之後確認圖床再補上。官網 https://hexo.io/ 安裝 Git 和 Node.js主要參者作者：lyyybz、Xuanwo必需先裝好 Git 和 Node.js 。 安裝和設定 GitGit 是一款免費、開源的分佈式版本控制系統。Git 的安裝詳細可參考 在 Windows 平台必裝的三套 Git 工具 一文，在此簡述必要的動作。 到 官網，點擊 Download 下載，預設安裝即可，安裝好後開啟 CMD ，輸入 git --version 確認安裝版本。 設定使用者名稱及電子郵件。 Git 的提交會使用這些資訊，而且提交後不能再被修改。詳細可參考 開始-初次設定-Git git config --global user.name &quot;名稱&quot; git config --global user.email Email地址 可用 git config --global --list 確認是否設定正確 安裝 Node.jsNode.js 是一款開源且跨平台的伺服器端和網路應用，使用 JavaScript 開發。到官網下載 https://nodejs.org/en/ ，默認安裝即可。 完成後可以在 cmd 輸入以下指令確認 node -v npm -v 配置 Github至 https://github.com/ 申請一個帳號。登陸之後，點擊頁面右上角的加號，選擇New repository (建立儲存庫) Repository name 下填寫 yourname.github.io (yourname 是 github 帳號)Description (optional) 下填寫一些簡單的描述（不寫也沒有關係） 開啟 gh-pages 功能點擊界面右側的 Settings，你將會打開這個庫的 setting 頁面，向下拖動，直到看見GitHub Pages 點擊 Automatic page generator，Github 將會創建出一個 gh-pages 的頁面。 如果配置沒有問題，那麼大約 15 分鐘之後，yourname.github.io這個網址就可以正常訪問了~ 如果yourname.github.io已經可以正常訪問了，那麼 Github 一側的配置已經全部結束了。 配置 Hexo先決定好要放置 blog 文件的資料夾，此文均假設是 D://Github/blug，建立好後該資料後在位置列輸入 cmd ，用當前目錄開啟 CMD 於 CMD 中輸入 npm install hexo-cli-g npm install hexo --save npm install hexo-deployer-git --save 安裝好後輸入以下指令確認安裝結果 hexo -v 初始化 Hexo輸入以下指令在當前資料夾初始化 Hexo 相關檔案 hexo init npm install 生成靜態網頁 hexo g 本機測試 hexo s 打在 http://localhost:4000/ ，可以看到當前的網頁 使用 Hexo可以在 _config.yml 中修改大部份的配置。 配置 Deployment用文字編輯器修改 D://Github/blog (範例用)下的 _config.yml ，找到 Deployment ，按照如下 file:///D:/Github/blog/_config.yml1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master 在該目錄下開啟CMD，輸入 hexo d 開始佈署 添加新文章打開 Hexo 目錄下的source文件夾，所有的文章都會以 md 形式保存在_post文件夾中，只要在_post文件夾中新建 md 類型的文檔，就能在執行hexo g的時候被渲染。 新建的文章頭需要添加一些 yml 資訊，如下所示： file:///D:/Github/blog/source/_post/文章標題.me123title: hello-world //在此處添加你的標題。date: 2014-11-7 08:55:29 //在此處輸入你編輯這篇文章的時間。categories: Exercise //在此處輸入這篇文章的分類。 顯示閱讀全文按鈕在文章中添加 more 標籤即可，形式如下： &lt;!--more--&gt; 標籤以上的內容將以摘要的形式在首頁顯示，並出現閱讀全文的按鈕。 Markdown 記錄編輯格式是用 markdown ，留一下參考連結http://markdown.tw/https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/ HTML 錨點跳轉來源：Charlotte.HonG在文章中可用以下放式建立跳轉 1&lt;span id="First"&gt;跳轉到的地方&lt;/span&gt; 相對應的跳轉方式就是1[點我跳轉](#First) 添加代碼折疊功能作者：Ryan Miao 22 themes/next/source/js/src/post-details.js,在裡面找合適的位置，添加如下代碼： file:///D:/Github/blog/themes/next/source/js/src/post-details.js12345678$(document).ready(function()&#123; $(document).on('click', '.fold_hider', function()&#123; $('&gt;.fold', this.parentNode).slideToggle(); $('&gt;:first', this).toggleClass('open'); &#125;); //默認情況下摺疊 $("div.fold").css("display","none");&#125;); 在主題scripts下添加一個tags.js, 位於themes/next/scripts/tags.jsfile:///D:/Github/blog/themes/next/scripts/tags.js123456789101112131415161718192021222324/* @haohuawu 修復 Nunjucks 的 tag 裡寫 ```代碼塊```，最終都會渲染成 undefined 的問題 https://github.com/hexojs/hexo/issues/2400*/const rEscapeContent = /&lt;escape(?:[^&gt;]*)&gt;([\s\S]*?)&lt;\/escape&gt;/g;const placeholder = '\uFFFD';const rPlaceholder = /(?:&lt;|&amp;lt;)\!--\uFFFD(\d+)--(?:&gt;|&amp;gt;)/g;const cache = [];function escapeContent(str) &#123; return '&lt;!--' + placeholder + (cache.push(str) - 1) + '--&gt;';&#125;hexo.extend.filter.register('before_post_render', function(data) &#123; data.content = data.content.replace(rEscapeContent, function(match, content) &#123; return escapeContent(content); &#125;); return data;&#125;);hexo.extend.filter.register('after_post_render', function(data) &#123; data.content = data.content.replace(rPlaceholder, function() &#123; return cache[arguments[1]]; &#125;); return data;&#125;); 再繼續添加一個fold.jsfile:///D:/Github/blog/themes/next/scripts/fold.js12345678/* global hexo */// Usage: &#123;% fold ???? %&#125; Something &#123;% endfold %&#125;function fold (args, content) &#123; var text = args[0]; if(!text) text = "點擊顯/隱"; return '&lt;div&gt;&lt;div class="fold_hider"&gt;&lt;div class="close hider_title"&gt;' + text + '&lt;/div&gt;&lt;/div&gt;&lt;div class="fold"&gt;\n' + hexo.render.renderSync(&#123;text: content, engine: 'markdown'&#125;) + '\n&lt;/div&gt;&lt;/div&gt;';&#125;hexo.extend.tag.register('fold', fold, &#123;ends: true&#125;); 最後，添加幾個自定義樣式，位置themes/next/source/css/_custom/custom.stylfile:///D:/Github/blog/themes/next/source/css/_custom/custom.styl12345678910.hider_title&#123; font-family: "Microsoft Yahei"; cursor: pointer;&#125;.close:after&#123; content: "▼";&#125;.open:after&#123; content: "▲";&#125; 最後，在文章中我們需要摺疊的地方前後添加便簽，示例用法：123&#123;% fold 點擊顯/隱內容 %&#125;something you want to fold, include code block.&#123;% endfold %&#125; 增加注解功能安裝 hexo-footnotes npm install hexo-footnotes --save 安裝完成即自動啟用，如果沒啟用，可以修改 _config.yml 添加以下資料： file:///D:/Github/blog/_config.yml12plugins: - hexo-footnotes 使用方法為(去除反除線) [^\1][^\1]: 注解1 文章連結唯一化Hexo 的文章連結預設是採用發佈時間或標題來使用，如果變更會導至連結改變，不利分享或 SEO，可安裝 hexo-abbrlink 解決作者 npm install hexo-abbrlink --save 更改主文牛的 _config.yml file:///D:/Github/blog/_config.yml1permalink: posts/:abbrlink/ 再 config.yml 下加上file:///D:/Github/blog/_config.yml1234# abbrlink configabbrlink: alg: crc32 #support crc16(default) and crc32 rep: hex #support dec(default) and hex 效果如下 crc16 &amp; hex https://post.zz173.com/posts/66c8.html crc16 &amp; dec https://post.zz173.com/posts/65535.html crc32 &amp; hex https://post.zz173.com/posts/8ddf18fb.html crc32 &amp; dec https://post.zz173.com/posts/1690090958.html crc16 最大的數量為 65535 ，對一個個人部落格而言是非常足夠 部署時保證 README.md 不被渲染來源：Godlike一般 Git 倉庫下面都有一個README.md來表現這個倉庫設立的目的，但是運用 hexo 佈置的時候會被自動渲染，接下來要介紹部署時保證README.md不被渲染的方法。 在 Hexo 目錄下的source根目錄下添加一個,README.md。修改 Hexo 目錄下的_config.yml。將skip_render參數的值設置上。skip_render: README.md保存退出即可。 修改主題為 Next作者：zhiho在 blog 資料夾下使用命令下載 Next 主題到 themes 目錄中 git clone https://github.com/iissnan/hexo-theme-next themes/next 修改站點配置文件_config.yml 中的 theme 標籤： file:///D:/Github/blog/_config.yml1theme: next 修改成功後，重新啟動 Server 就能夠看到修改後的效果。Next 主題一共有三種樣式，可以通過修改 Next 主題的配置文件_config.yml 來修改： file:///D:/Github/blog/theme/next/_config.yml12345678# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemesscheme: Muse#scheme: Mist#scheme: Pisces Gitalk 評論系統作者：asdfv1020一個基於 Github Issue 和 Preact 開發的評論插件，所有要修改的檔案都是在 D:\GitHub\blog\themes\next (範例目錄的\themes\next) 之下詳情 Demo 可見：https://gitalk.github.io/ 註冊新應用在 GitHub 上註冊新應用，鏈結：https://github.com/settings/applications/new 參數說明： Application name： # 應用名稱，隨意 Homepage URL： # 網站 URL，如 https://ppundsh.github.io ，不是 repo Application description # 描述，隨意 Authorization callback URL：# 網站 URL，https://ppundsh.github.io ，不是 repo 點擊註冊後，頁面跳轉，其中Client ID和Client Secret在後面的配置中需要用到，到時複製粘貼即可 comments.swig修改 /layout/_partials/comments.swig，添加內容在最下面： file:///D:/Github/blog/theme/next/layout/_partials/comments.swig123&#123;% if theme.gitalk.enable %&#125; &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;&#123;% endif %&#125; index.swig修改layout/_third-party/comments/index.swig，在最後一行添加內容： file:///D:/Github/blog/theme/next/layout/_third-party/comments/index.swig1&#123;% include &apos;gitalk.swig&apos; %&#125; gitalk.styl新建/source/css/_common/components/third-party/gitalk.styl文件，添加內容： file:///D:/Github/blog/theme/next/source/css/_common/components/third-party/gitalk.styl1234.gt-header a, .gt-comments a, .gt-popup a border-bottom: none;.gt-container .gt-popup .gt-action.is--active:before top: 0.7em; third-party.styl修改/source/css/_common/components /third-party/third-party.styl，在最後一行上添加內容，引入樣式： file:///D:/Github/blog/theme/next/source/css/_common/components/third-party/third-party.styl1@import "gitalk"; Md5 加密 id 避免中文編碼過長參考資料與作者：qhh0205、uolcanopost 檔名為中文時，容易造成編碼出 github issue lables 50 字符限制而出現 Error: Validation Failed. ，解決方法為使用 md5 加密 id 來縮短長度。 在此把 md5 加密的 js 放在 gist 上托管，在主頁面上右上角的頭像，點一下選 your gistGist description ：說明，選填Filename including extension ：md5.min.js內容請貼上以下 js 源碼點開後的內容：點我 完成後點右下的 Create public gist 以創建。 創建成功後，點擊右邊的 RAW ，將網址的 gist.githubusercontent.com 替換為 rawgit.com ，即 https://rawgit.com/ppundsh/f359785730acb0fbfdee07eb12522623/raw/15ce7e5ea97e7afb71792d58a21978f225195a12/md5.min.js 以上即為 md5 js gist 嵌入鏈結 gitalk.swig新建 /layout/_third-party/comments/gitalk.swig 文件，並添加內容：第二行 &lt;scrip scrc= 替換為自已的 md5 js gist 嵌入鏈結 file:///D:/Github/blog/theme/next/layout/_third-party/comments/gitalk.swig1234567891011121314151617&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt; &lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://rawgit.com/qhh0205/78e9e0b1f3114db6737f3ed8cdd51d3a/raw/3894c5be5aa2378336b1f5ee0f296fa0b22d06e9/md5.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var gitalk = new Gitalk(&#123; clientID: &apos;&#123;&#123; theme.gitalk.ClientID &#125;&#125;&apos;, clientSecret: &apos;&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;&apos;, repo: &apos;&#123;&#123; theme.gitalk.repo &#125;&#125;&apos;, owner: &apos;&#123;&#123; theme.gitalk.githubID &#125;&#125;&apos;, admin: [&apos;&#123;&#123; theme.gitalk.adminUser &#125;&#125;&apos;], id: md5(location.pathname), distractionFreeMode: &apos;&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;&apos; &#125;) gitalk.render(&apos;gitalk-container&apos;) &lt;/script&gt;&#123;% endif %&#125; 關閉不須要的評論D:\GitHub\blog\source\tags\inedx.md在 type: 下加入file:///D:/Github/blog/source/tags/inedx.md1comments: false _config.yml在主題配置文件next/_config.yml中添加如下內容： file:///D:/Github/blog/theme/next/_config.yml12345678gitalk: enable: true githubID: github帳號 # 例：ppundsh repo: 倉庫名稱 # 例：ppundsh.github.io ClientID: Client ID ClientSecret: Client Secret adminUser: github帳號 #指定可初始化評論賬戶 例：ppundsh distractionFreeMode: true 以上就是 NexT 中添加 gitalk 評論的配置，博客上傳到 GitHub 上後，打開頁面進入某一博客內容下，就可看到評論處。 Next 其它功能完善主題寬度調節作者：ehlxr 編輯 themes/next/source/css/_variables/custom.styl 文件，新增變量： file:///D:/Github/blog/themes/next/source/css/_variables/custom.styl12345// 修改成你期望的寬度$content-desktop = 700px// 當視窗超過 1600px 後的寬度$content-desktop-large = 900px 以上方法不適用 Pisces Scheme Pisces Scheme 編輯 themes/next/source/css/_schemes/Picses/_layout.styl 文件，更改以下 css 選項定義值： file:///D:/Github/blog/themes/next/source/css/_schemes/Picses/_layout.styl123.header&#123; width: 1150px; &#125;.container .main-inner &#123; width: 1150px; &#125;.content-wrap &#123; width: calc(100% - 260px); &#125; 載入動畫https://github.com/theme-next/theme-next-pace 在 themes/next 下輸入以下指令file:///.themes/next1git clone https://github.com/theme-next/theme-next-pace source/lib/pace 修改 config.ymlfile:///.themes/next/_config.yml1pace: true 圖片特效https://github.com/theme-next/theme-next-fancybox3參考23 在 themes/next 下輸入以下指令file:///.themes/next1git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox 修改 config.ymlfile:///.themes/next/_config.yml1fancybox: true 搜索功能作者：Alliot 推薦使用 Local Search 作為站內搜索，搜索速度快，同時比較簡潔，啟用方法如下： 1、安裝插件 安裝 hexo-generator-searchdb 插件 打開 Node.js command prompt，在站點的根目錄下執行以下命令： npm install hexo-generator-searchdb --save 2、更改配置文件更改站點配置文件，新增如下內容於任意位置： 12345search: path: search.xml field: post format: html limit: 10000 更改 NexT 主題配置文件，開啟 Local Search 作為站內搜索： 123# Local searchlocal_search: enable: true 功能表設置NexT 主題功能表設置，用於設置博客上方導航欄，在主題配置文件中修改。 1234567menu: home: / #主頁 categories: /categories #分類頁（需手動創建） #about: /about #關於頁面（需手動創建） archives: /archives #歸檔頁 tags: /tags #標籤頁（需手動創建） #commonweal: /404.html # 404 （需手動創建） 只是在 menu 選項中設置還不能讓標籤頁面、分類頁面生效，需要我們手動創建 標籤頁面運行以下命令1hexo new page "tags" 同時，在 / source 目錄下會生成一個 tags 文件夾，裡面包含一個index.md文件 修改 / source/tags 目錄下的index.md文件 1234title: tagsdate: 2015-09-29 14:37:02type: "tags"--- 修改主題配置文件 去掉 tags 的註釋 1234567menu: home: / #主頁 categories: /categories #分類頁（需手動創建） #about: /about #關於頁面（需手動創建） archives: /archives #歸檔頁 tags: /tags #標籤頁（需手動創建） #commonweal: /404.html #公益 404 （需手動創建） 標籤雲參閱官方教學進入到 hexo 的根目錄，然後在 package.json 中添加依賴(注意此為 json 格式，最後一個項目以外行尾都要加上“,”): “hexo-tag-cloud”: “2.0.*”然後執行 npm install 命令 添加在側邊欄對於 ejs 的用戶這裡以默認主題 landscape 為例。 tagcloud 範本文件為 hexo/themes/landscape/layout/_widget/tagcloud.ejs將這個文件修改為如下內容：123456789101112&lt;% if (site.tags.length) &#123; %&gt; &lt;script type="text/javascript" charset="utf-8" src="/js/tagcloud.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" charset="utf-8" src="/js/tagcanvas.js"&gt;&lt;/script&gt; &lt;div class="widget-wrap"&gt; &lt;h3 class="widget-title"&gt;Tag Cloud&lt;/h3&gt; &lt;div id="myCanvasContainer" class="widget tagcloud"&gt; &lt;canvas width="250" height="250" id="resCanvas" style="width=100%"&gt; &lt;%- tagcloud() %&gt; &lt;/canvas&gt; &lt;/div&gt; &lt;/div&gt;&lt;% &#125; %&gt; 對於 swig 用戶這裡以 Next 主題為例。找到文件 next/layout/_macro/sidebar.swig, 然後添加如下內容。123456789101112&#123;% if site.tags.length &gt; 1 %&#125;&lt;script type="text/javascript" charset="utf-8" src="/js/tagcloud.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" charset="utf-8" src="/js/tagcanvas.js"&gt;&lt;/script&gt;&lt;div class="widget-wrap"&gt; &lt;h3 class="widget-title"&gt;Tag Cloud&lt;/h3&gt; &lt;div id="myCanvasContainer" class="widget tagcloud"&gt; &lt;canvas width="250" height="250" id="resCanvas" style="width=100%"&gt; &#123;&#123; list_tags() &#125;&#125; &lt;/canvas&gt; &lt;/div&gt;&lt;/div&gt;&#123;% endif %&#125; 添加在標籤頁以 Next 主題為例。在 Blog\themes\next\layout\page.swig 中，修改並添加以下內容： 1234567891011121314151617181920212223242526272829&#123;% if page.type === "tags" %&#125; &lt;div class="tag-cloud"&gt; &lt;div class="tag-cloud-title"&gt; &#123;% set visibleTags = 0 %&#125; &#123;% for tag in site.tags %&#125; &#123;% if tag.length %&#125; &#123;% set visibleTags += 1 %&#125; &#123;% endif %&#125; &#123;% endfor %&#125; &#123;&#123; _p('counter.tag_cloud', visibleTags) &#125;&#125; &lt;/div&gt; &#123;#&lt;div class="tag-cloud-tags"&gt; &#123;&#123; tagcloud(&#123;min_font: 12, max_font: 30, amount: 300, color: true, start_color: '#ccc', end_color: '#111'&#125;) &#125;&#125; &lt;/div&gt;#&#125; &#123;% if site.tags.length &gt; 1 %&#125; &lt;script type="text/javascript" charset="utf-8" src="/js/tagcloud.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" charset="utf-8" src="/js/tagcanvas.js"&gt;&lt;/script&gt; &lt;div class="widget-wrap"&gt; &lt;div id="myCanvasContainer" class="widget tagcloud"&gt; &lt;canvas width="500" height="500" id="resCanvas" style="width=100%"&gt; &#123;&#123; list_tags() &#125;&#125; &lt;/canvas&gt; &lt;/div&gt; &lt;/div&gt; &#123;% endif %&#125; &lt;/div&gt;&#123;% elif page.type === 'categories' %&#125; 最後一步完成安裝和顯示，可以通過 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 來進行本地預覽, hexo clean 為必須選項。**PS: 不要使用 hexo g -d 或者 hexo d -g 這類組合命令。 雖然有看到這則 教學，但測試下失敗了，而同時加入側邊欄和標籤頁的話 Tag 會變兩倍，有空在來想要怎麼解決。 自定義現在 hexo-tag-cloud 插件支援自定義啦。非常簡單的步驟就可以改變你的標籤雲的字體和顏色，還有突出高亮。 在你的博客根目錄，找到 _config.yml 文件然後添加如下的配置項:123456# hexo-tag-cloudtag_cloud: textFont: Trebuchet MS, Helvetica textColour: \#333 textHeight: 25 outlineColour: \#E2E1D1 分類頁面運行以下命令 1hexo new page "categories" 同時，在 / source 目錄下會生成一個 categories 文件夾，裡面包含一個index.md文件 修改 / source/categories 目錄下的index.md文件 1234title: categoriesdate: 2015-09-29 14:47:21type: "categories"--- 修改主題配置文件去掉 categories 的註釋123456menu: home: / #主頁 categories: /categories #分類頁（需手動創建） #about: /about #關於頁面（需手動創建） archives: /archives #歸檔頁 tags: /tags #標籤頁（需手動創建） 側邊欄頭像設置編輯站點配置文件，增加 avatar 欄位 頭像 avatar: /images/avatar.png頭像圖片須放置在主題的 /source/images / 目錄下 開啟“更新時間”在 D:\GitHub\Blog\themes\next_config.yml 中修改以下內容開啟功能： 1234567# Post meta display settingspost_meta: item_text: true created_at: true updated_at: true # Only show 'updated' if different from 'created'. 當更新時間和創建時間不同時才顯示 updated_diff: true 修改文章底部的 tag 為 #號的標籤作者：Moorez修改範本/themes/next/layout/_macro/post.swig，搜索 rel=”tag”&gt;#，將 # 換成 文章字數統計切換到根目錄下，然後運行如下代碼 npm install hexo-symbols-count-time --save 在根目錄下的 _config.yml 加上： 12345symbols_count_time: symbols: true time: true total_symbols: true total_time: true 在 D:\GitHub\Blog\themes\next_config.yml 中修改以下內容開啟功能： 123456symbols_count_time: separated_meta: true #是否要跳行 item_text_post: true item_text_total: false awl: 1 #平均單字長度 wpm: 200 #每分鐘閱讀速度 設置網站的圖示 Favicon具體方法實現在 EasyIcon 中找一張（32*32）的ico圖示, 或者去別的網站下載或者製作，並將圖示名稱改為favicon.ico，然後把圖示放在/themes/next/source/images裡，並且修改主題配置文檔： # Put your favicon.ico into `hexo-site/source/` directory. favicon: /favicon.ico 隱藏網頁底部 powered By Hexo / 強力驅動打開themes/next/layout/_partials/footer.swig, 使用”” 隱藏之間的代碼即可，或者直接刪除。位置搜尋 “powered-by” 文章加密訪問####不用 Plug 的方式作者：Alliot原文點此 這裡搬運過來做備份 (這種方式是不安全的，詳情請點擊 hexo 文章密碼訪問的” 破解” 方法) head.swig找到 themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig 文件。添加如下代碼 (推薦加在所有的標籤之後): 12345678910&lt;script&gt; (function()&#123; if('&#123;&#123; page.password &#125;&#125;')&#123; if (prompt('請輸入文章密碼','') !== '&#123;&#123; page.password &#125;&#125;')&#123; alert('密碼錯誤！'); history.back(); &#125; &#125; &#125;)();&lt;/script&gt; 發文發文的時候頂部的頁面變量添加”password: 密碼” 即可，如: 123456title: '2017-01-01'permalink: post/111111111.htmltags: - TESTdate: 2017-01-01 00:00:00password: 123 hexo-blog-encrypt安裝在 D:\Github\Blog 下，找到 package.json 加上 “hexo-blog-encrypt”: “2.0.”需注意此為 json 格式，除了最後一筆以外都句尾都要有 “ , ” 在此目錄下，開啟 CMD ，執行 npminstall _config.yml在 D:\Github\Blog 下，修改 _config.yml ，加入以下字句123# Secutityencrypt: enable:true 可在 D:\GitHub\Blog\scaffolds\post.md 下加入 12password: #密碼abstract: #加密時顯示在文章列表的摘要 之後只要填寫 password: 後的密碼，該文即會被加密 動態背景參考：Xujian、canvas-nest.js for NexT 修改主題配置文件在根目錄 blog 中輸入 git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest 再開啟主題配置文件，文件位址：blog/theme/next/_config.yml將文件中的 canvas_nest: false 為 canvas_nest: true 即可。 配置項說明若覺得線條太多或想自行設定，可開啟 D:\GitHub\Hexo\ppundsh.github.io\themes\next\source\lib\canvas-nest\canvas-nest.min.js 找到以下參數：1234z: o(v, "zIndex", -1), //背景的 z-index 屬性，css 屬性用於控制所在層的位置, 默認: -1o: o(v, "opacity", 0.3), //線條透明度（0~1）, 默認: 0.5c: o(v, "color", "0,0,0"), //線條顏色, 默認: ‘0,0,0’；三個數字分別為 (R,G,B)n: o(v, "count", 70) //線條的總數量, 默認: 150 文章下設置版權訊息作者：Crocutax Hexo+NexT 主題，主題默認的版權聲明配置在themes\next_config.yml文件中 12345# Declare license on postspost_copyright: enable: false license: CC BY-NC-SA 3.0 license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/ 直接把enable 改為true即可開啟。 進階自定作法請參閱原文。 文章末顯示 —THE END—來源找到themes/next/layout/_macro/post.swig，添加在 123456```json&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;------ 本文結束 ------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; SEO 優化為了讓搜尋影擎更方便索引，可以有以下設置。 站點地圖作者：姜正宏的網路日誌、際富可以方便搜尋影擎索引 安裝插件安裝 google sitemap npm install hexo-generator-sitemap --save 安裝百度 sitemap npm install hexo-generator-baidu-sitemap --save 修改站點_config.yml 文件增加以下內容 1234sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 注意縮進。 執行hexo g後，public 目錄下就會生成 sitemap.xml 和 baidusitemap.xml 兩個文件了。 在 Google 站點工具設置個人使用 google 推薦的方試一直失敗，參考此文後能成功作者: iissnan設置 Google 站點管理工具 的驗證字串，用於提交 sitemap 獲取 google site verification code登錄 Google Webmaster Tools，導航到驗證方法，並選擇 HTML Tag。將會獲取到一段代碼： 1&lt;meta name="google-site-verification" content="XXXXXXXXXXXXXXXXXXXXXXX" /&gt; 將 content 裡面的 XXXXXXXXXXXXXXXXXXXXXXX 複製出來。 設置主題編輯站點的 _config.yml，新增欄位 google_site_verification google_site_verification: XXXXXXXXXXXXXXXXXXXXXXX hexo-autonofollow因垃圾外鍵會降低 SEO 的權重，加上此插件可以將除了友站以外的連結加上 nofollowInstall npm install hexo-autonofollow –saveOptionsYou can configure this plugin in _config.yml. 12345nofollow: enable: true exclude: - exclude1.com - exclude2.com 其它壓縮代碼加速載入在生成時會慢一點，但可以加速載入CMD 進入博客根目錄，執行以下命令 npm install hexo-neat --save 打開站點配置文件_config.yml，添加以下內容： 1234567891011121314151617#hexo-neat 加速neat_enable: trueneat_html: enable: true exclude: neat_css: enable: true exclude: - '*.min.css'neat_js: enable: true mangle: true output: compress: exclude: - '*.min.js' 圖片沿後載入來加速頁面載入速度作者 21 圖片懶載入是提升網站性能和用戶體驗的一個非常很好方式，並且幾乎所有的大型網站都使用到了，比如微博，僅把用戶可見的部分顯示圖片，其餘的都暫時不載入，做法就是：讓所有圖片元素 src 指向一個小的站位圖片比如 loading，並新增一個屬性 (如 data-original) 存放真實圖片位址。每當頁面載入（或者卷軸滾動），使用 JS 腳本將可視區域內的圖片 src 替換回真實位址，並做請求重新載入。 安裝步驟： npm install hexo-lazyload-image –save然後修改 _config.yml 文件1234lazyload: enable: true onlypost: false loadingImg: # eg. ./images/loading.png 圖片附加說明https://github.com/wayou/hexo-image-caption 1npm install --save hexo-image-caption 修改 _config.yml 啟用1234# add caption for iamgesimage_caption: enable: true #false to disable class_name: #if you wanna customize the style for the caption,you can assign a class name, default is 'image-caption' 參考網址Hexo - 構建博客詳解 史上最詳細的 Hexo 博客搭建圖文教程 可能是最詳細的 Hexo + GitHub Pages 搭建博客的教程 GitHub 建立遠端儲存庫 Gist 是 GitHub 推出的一款類似於 Pastebin 的代碼片段託管服務 Hexo 構建博客詳解 Hexo 搭建 GitHub 博客（三）- NexT 主題配置使用 Hexo NexT 主題中集成 gitalk 評論系統 hexo-next - 主題配置 gitalk 評論 - 爬坑記 為博客添加 Gitalk 評論插件 給 hexo 博客 nexT 主題添加 Gitalk 評論系統 給 hexo 添加 sitemap 和 baidusitemap 站點地圖功能 添加站點地圖 快速搭建個人博客 使用 hexo 的 next 主題如何添加動態背景 hexo的next主题个性化配置教程 hexo 的搭建、設置與部分優化 Markdown HackMD Github 同一頁文內跳轉 添加 Google Webmaster tools 驗證 Hexo 博客搭建攻略（二）：進階篇 21.Hexo-lazyload-image 圖片懶載入 ↩22.Hexo next 博客添加摺疊塊功能添加摺疊代碼塊 ↩23.Hexo 折騰：利用 Fancybox 添加圖片放大預覽查看功能 ↩]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
